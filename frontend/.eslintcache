[{"/Users/caleb/Desktop/new-account/frontend/src/index.js":"1","/Users/caleb/Desktop/new-account/frontend/src/store.js":"2","/Users/caleb/Desktop/new-account/frontend/src/reportWebVitals.js":"3","/Users/caleb/Desktop/new-account/frontend/src/App.js":"4","/Users/caleb/Desktop/new-account/frontend/src/reducers/contributorReducers.js":"5","/Users/caleb/Desktop/new-account/frontend/src/reducers/branchReducers.js":"6","/Users/caleb/Desktop/new-account/frontend/src/reducers/investmentReducers.js":"7","/Users/caleb/Desktop/new-account/frontend/src/reducers/authReducers.js":"8","/Users/caleb/Desktop/new-account/frontend/src/reducers/staffReducers.js":"9","/Users/caleb/Desktop/new-account/frontend/src/reducers/topUpReducers.js":"10","/Users/caleb/Desktop/new-account/frontend/src/screens/StaffListScreen.js":"11","/Users/caleb/Desktop/new-account/frontend/src/screens/CreateBranchScreen.js":"12","/Users/caleb/Desktop/new-account/frontend/src/screens/LoginScreen.js":"13","/Users/caleb/Desktop/new-account/frontend/src/screens/StaffRegisterScreen.js":"14","/Users/caleb/Desktop/new-account/frontend/src/screens/StaffDetailScreen.js":"15","/Users/caleb/Desktop/new-account/frontend/src/screens/CreateTopUpScreen.js":"16","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorRegisterScreen.js":"17","/Users/caleb/Desktop/new-account/frontend/src/screens/HomeScreen.js":"18","/Users/caleb/Desktop/new-account/frontend/src/components/Footer.js":"19","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorListScreen.js":"20","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributionConfirmScreen.js":"21","/Users/caleb/Desktop/new-account/frontend/src/screens/AllTopUpsScreen.js":"22","/Users/caleb/Desktop/new-account/frontend/src/screens/ReceiptGeneratorScreen.js":"23","/Users/caleb/Desktop/new-account/frontend/src/screens/DuePaymentsScreen.js":"24","/Users/caleb/Desktop/new-account/frontend/src/screens/LegalMOUScreen.js":"25","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorDetailsScreen.js":"26","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorAuthScreen.js":"27","/Users/caleb/Desktop/new-account/frontend/src/screens/BranchEditScreen.js":"28","/Users/caleb/Desktop/new-account/frontend/src/screens/ProfileScreen.js":"29","/Users/caleb/Desktop/new-account/frontend/src/screens/TopUpVerifyScreen.js":"30","/Users/caleb/Desktop/new-account/frontend/src/screens/TopUpReceiptScreen.js":"31","/Users/caleb/Desktop/new-account/frontend/src/screens/LegalMouTopScreen.js":"32","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributionNewScreen.js":"33","/Users/caleb/Desktop/new-account/frontend/src/screens/BMSummaryScreen.js":"34","/Users/caleb/Desktop/new-account/frontend/src/components/Header.js":"35","/Users/caleb/Desktop/new-account/frontend/src/screens/BranchListScreen.js":"36","/Users/caleb/Desktop/new-account/frontend/src/components/Message.js":"37","/Users/caleb/Desktop/new-account/frontend/src/components/Loader.js":"38","/Users/caleb/Desktop/new-account/frontend/src/components/FormContainer.js":"39","/Users/caleb/Desktop/new-account/frontend/src/constants/staffConstants.js":"40","/Users/caleb/Desktop/new-account/frontend/src/constants/investmentConstants.js":"41","/Users/caleb/Desktop/new-account/frontend/src/constants/contributorConstants.js":"42","/Users/caleb/Desktop/new-account/frontend/src/constants/branchConstants.js":"43","/Users/caleb/Desktop/new-account/frontend/src/constants/authConstants.js":"44","/Users/caleb/Desktop/new-account/frontend/src/constants/topUpConstants.js":"45","/Users/caleb/Desktop/new-account/frontend/src/actions/branchActions.js":"46","/Users/caleb/Desktop/new-account/frontend/src/actions/authActions.js":"47","/Users/caleb/Desktop/new-account/frontend/src/actions/staffActions.js":"48","/Users/caleb/Desktop/new-account/frontend/src/actions/contributorActions.js":"49","/Users/caleb/Desktop/new-account/frontend/src/actions/topUpActions.js":"50","/Users/caleb/Desktop/new-account/frontend/src/actions/investmentActions.js":"51","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/index.js":"52","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/store.js":"53","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/App.js":"54","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reportWebVitals.js":"55","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/authReducers.js":"56","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/branchReducers.js":"57","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/staffReducers.js":"58","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/contributorReducers.js":"59","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/topUpReducers.js":"60","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/investmentReducers.js":"61","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffRegisterScreen.js":"62","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffListScreen.js":"63","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LoginScreen.js":"64","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffDetailScreen.js":"65","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/HomeScreen.js":"66","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Footer.js":"67","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/CreateBranchScreen.js":"68","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorRegisterScreen.js":"69","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorListScreen.js":"70","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributionConfirmScreen.js":"71","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LegalMOUScreen.js":"72","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BranchListScreen.js":"73","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Header.js":"74","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/CreateTopUpScreen.js":"75","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributionNewScreen.js":"76","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/DuePaymentsScreen.js":"77","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/AllTopUpsScreen.js":"78","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ReceiptGeneratorScreen.js":"79","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorDetailsScreen.js":"80","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BranchEditScreen.js":"81","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/TopUpReceiptScreen.js":"82","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ProfileScreen.js":"83","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BMSummaryScreen.js":"84","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LegalMouTopScreen.js":"85","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/TopUpVerifyScreen.js":"86","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorAuthScreen.js":"87","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/contributorConstants.js":"88","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/topUpConstants.js":"89","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/authConstants.js":"90","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/branchConstants.js":"91","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/FormContainer.js":"92","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/staffConstants.js":"93","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Loader.js":"94","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/investmentConstants.js":"95","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/contributorActions.js":"96","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/authActions.js":"97","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Message.js":"98","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/staffActions.js":"99","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/investmentActions.js":"100","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/topUpActions.js":"101","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/branchActions.js":"102"},{"size":597,"mtime":1606488218998,"results":"103","hashOfConfig":"104"},{"size":2303,"mtime":1611065446726,"results":"105","hashOfConfig":"104"},{"size":362,"mtime":1606477095335,"results":"106","hashOfConfig":"104"},{"size":3938,"mtime":1609510120286,"results":"107","hashOfConfig":"104"},{"size":1840,"mtime":1610973935836,"results":"108","hashOfConfig":"104"},{"size":1537,"mtime":1608551556314,"results":"109","hashOfConfig":"104"},{"size":3978,"mtime":1610979491562,"results":"110","hashOfConfig":"104"},{"size":1633,"mtime":1611065479365,"results":"111","hashOfConfig":"104"},{"size":1523,"mtime":1606905585248,"results":"112","hashOfConfig":"104"},{"size":2025,"mtime":1608541353707,"results":"113","hashOfConfig":"104"},{"size":2562,"mtime":1606833703589,"results":"114","hashOfConfig":"104"},{"size":3629,"mtime":1608199690514,"results":"115","hashOfConfig":"104"},{"size":2399,"mtime":1606513127304,"results":"116","hashOfConfig":"104"},{"size":5947,"mtime":1611059960367,"results":"117","hashOfConfig":"104"},{"size":1887,"mtime":1606858217557,"results":"118","hashOfConfig":"104"},{"size":8435,"mtime":1607470726954,"results":"119","hashOfConfig":"104"},{"size":11390,"mtime":1611055442091,"results":"120","hashOfConfig":"104"},{"size":28131,"mtime":1610826789924,"results":"121","hashOfConfig":"104"},{"size":371,"mtime":1611049882962,"results":"122","hashOfConfig":"104"},{"size":3174,"mtime":1610969747816,"results":"123","hashOfConfig":"104"},{"size":9825,"mtime":1611125574871,"results":"124","hashOfConfig":"104"},{"size":4085,"mtime":1608418844641,"results":"125","hashOfConfig":"104"},{"size":6972,"mtime":1609049356519,"results":"126","hashOfConfig":"104"},{"size":3805,"mtime":1611125574873,"results":"127","hashOfConfig":"104"},{"size":8369,"mtime":1609048613316,"results":"128","hashOfConfig":"104"},{"size":18297,"mtime":1611047666740,"results":"129","hashOfConfig":"104"},{"size":3428,"mtime":1606861755701,"results":"130","hashOfConfig":"104"},{"size":3805,"mtime":1610871785103,"results":"131","hashOfConfig":"104"},{"size":3386,"mtime":1611120485593,"results":"132","hashOfConfig":"104"},{"size":6989,"mtime":1611125574871,"results":"133","hashOfConfig":"104"},{"size":5639,"mtime":1611125573359,"results":"134","hashOfConfig":"104"},{"size":7191,"mtime":1608727521081,"results":"135","hashOfConfig":"104"},{"size":12537,"mtime":1611053921645,"results":"136","hashOfConfig":"104"},{"size":11147,"mtime":1611125574863,"results":"137","hashOfConfig":"104"},{"size":5039,"mtime":1611047369530,"results":"138","hashOfConfig":"104"},{"size":2848,"mtime":1611125567367,"results":"139","hashOfConfig":"104"},{"size":381,"mtime":1611127700967,"results":"140","hashOfConfig":"104"},{"size":389,"mtime":1606494598802,"results":"141","hashOfConfig":"104"},{"size":336,"mtime":1606490263061,"results":"142","hashOfConfig":"104"},{"size":590,"mtime":1606905607974,"results":"143","hashOfConfig":"104"},{"size":1685,"mtime":1608632114482,"results":"144","hashOfConfig":"104"},{"size":761,"mtime":1606995683143,"results":"145","hashOfConfig":"104"},{"size":817,"mtime":1608549179963,"results":"146","hashOfConfig":"104"},{"size":738,"mtime":1611065070321,"results":"147","hashOfConfig":"104"},{"size":813,"mtime":1608541180171,"results":"148","hashOfConfig":"104"},{"size":3303,"mtime":1611125573358,"results":"149","hashOfConfig":"104"},{"size":2859,"mtime":1611066340930,"results":"150","hashOfConfig":"104"},{"size":2630,"mtime":1610833052129,"results":"151","hashOfConfig":"104"},{"size":3987,"mtime":1610969791198,"results":"152","hashOfConfig":"104"},{"size":5133,"mtime":1611124703844,"results":"153","hashOfConfig":"104"},{"size":8207,"mtime":1611051619351,"results":"154","hashOfConfig":"104"},{"size":597,"mtime":1606488218998,"results":"155","hashOfConfig":"156"},{"size":2303,"mtime":1611065446726,"results":"157","hashOfConfig":"156"},{"size":3938,"mtime":1609510120286,"results":"158","hashOfConfig":"156"},{"size":362,"mtime":1606477095335,"results":"159","hashOfConfig":"156"},{"size":1633,"mtime":1611065479365,"results":"160","hashOfConfig":"156"},{"size":1537,"mtime":1608551556314,"results":"161","hashOfConfig":"156"},{"size":1523,"mtime":1606905585248,"results":"162","hashOfConfig":"156"},{"size":1840,"mtime":1610973935836,"results":"163","hashOfConfig":"156"},{"size":2025,"mtime":1608541353707,"results":"164","hashOfConfig":"156"},{"size":3978,"mtime":1610979491562,"results":"165","hashOfConfig":"156"},{"size":5947,"mtime":1611235883038,"results":"166","hashOfConfig":"156"},{"size":2562,"mtime":1611516122367,"results":"167","hashOfConfig":"156"},{"size":2399,"mtime":1606513127304,"results":"168","hashOfConfig":"156"},{"size":1887,"mtime":1606858217557,"results":"169","hashOfConfig":"156"},{"size":30845,"mtime":1611223903624,"results":"170","hashOfConfig":"156"},{"size":371,"mtime":1611049882962,"results":"171","hashOfConfig":"156"},{"size":3656,"mtime":1611233572445,"results":"172","hashOfConfig":"156"},{"size":11390,"mtime":1611055442091,"results":"173","hashOfConfig":"156"},{"size":3174,"mtime":1610969747816,"results":"174","hashOfConfig":"156"},{"size":9825,"mtime":1611125574871,"results":"175","hashOfConfig":"156"},{"size":8369,"mtime":1609048613316,"results":"176","hashOfConfig":"156"},{"size":2848,"mtime":1611125567367,"results":"177","hashOfConfig":"156"},{"size":5039,"mtime":1611221727867,"results":"178","hashOfConfig":"156"},{"size":8435,"mtime":1607470726954,"results":"179","hashOfConfig":"156"},{"size":12537,"mtime":1611053921645,"results":"180","hashOfConfig":"156"},{"size":3805,"mtime":1611125574873,"results":"181","hashOfConfig":"156"},{"size":4085,"mtime":1608418844641,"results":"182","hashOfConfig":"156"},{"size":6972,"mtime":1609049356519,"results":"183","hashOfConfig":"156"},{"size":18297,"mtime":1611047666740,"results":"184","hashOfConfig":"156"},{"size":3805,"mtime":1610871785103,"results":"185","hashOfConfig":"156"},{"size":5639,"mtime":1611125573359,"results":"186","hashOfConfig":"156"},{"size":3386,"mtime":1611120485593,"results":"187","hashOfConfig":"156"},{"size":11147,"mtime":1611125574863,"results":"188","hashOfConfig":"156"},{"size":7191,"mtime":1608727521081,"results":"189","hashOfConfig":"156"},{"size":6989,"mtime":1611125574871,"results":"190","hashOfConfig":"156"},{"size":3428,"mtime":1606861755701,"results":"191","hashOfConfig":"156"},{"size":761,"mtime":1606995683143,"results":"192","hashOfConfig":"156"},{"size":813,"mtime":1608541180171,"results":"193","hashOfConfig":"156"},{"size":738,"mtime":1611065070321,"results":"194","hashOfConfig":"156"},{"size":817,"mtime":1608549179963,"results":"195","hashOfConfig":"156"},{"size":336,"mtime":1606490263061,"results":"196","hashOfConfig":"156"},{"size":590,"mtime":1606905607974,"results":"197","hashOfConfig":"156"},{"size":389,"mtime":1606494598802,"results":"198","hashOfConfig":"156"},{"size":1685,"mtime":1608632114482,"results":"199","hashOfConfig":"156"},{"size":3987,"mtime":1610969791198,"results":"200","hashOfConfig":"156"},{"size":2859,"mtime":1611066340930,"results":"201","hashOfConfig":"156"},{"size":381,"mtime":1611127700967,"results":"202","hashOfConfig":"156"},{"size":2630,"mtime":1610833052129,"results":"203","hashOfConfig":"156"},{"size":8207,"mtime":1611051619351,"results":"204","hashOfConfig":"156"},{"size":5133,"mtime":1611124703844,"results":"205","hashOfConfig":"156"},{"size":3303,"mtime":1611125573358,"results":"206","hashOfConfig":"156"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},"1g61p8p",{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"209"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"209"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"209"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"209"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"209"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"209"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"209"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"209"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"209"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"209"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"209"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"209"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"209"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"209"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"209"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"209"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"209"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"209"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"209"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"209"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"209"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},"obpmq6",{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"334"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"334"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"334"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"334"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"334"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"334"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"334"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"334"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"334"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"334"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"334"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"334"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"334"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"334"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"334"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"334"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"334"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"334"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"334"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"334"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},"/Users/caleb/Desktop/new-account/frontend/src/index.js",[],["436","437"],"/Users/caleb/Desktop/new-account/frontend/src/store.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reportWebVitals.js",[],"/Users/caleb/Desktop/new-account/frontend/src/App.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/contributorReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/branchReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/investmentReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/authReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/staffReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/reducers/topUpReducers.js",[],"/Users/caleb/Desktop/new-account/frontend/src/screens/StaffListScreen.js",["438"],"import React, { useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Table, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listAllStaff } from '../actions/staffActions';\n\nconst StaffListScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const staffList = useSelector((state) => state.staffList);\n  const { loading, error, allStaff } = staffList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    if (!userInfo || !(userInfo.data.user.role === 'super-admin')) {\n      history.push('/login');\n    }\n    dispatch(listAllStaff());\n  }, [dispatch, history, userInfo]);\n\n  const createStaffHandler = () => {\n    history.push('/register-staff');\n  };\n  return (\n    <>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1>Staff</h1>\n        </Col>\n        <Col className=\"text-right\">\n          <Button className=\"my-3\" onClick={createStaffHandler}>\n            <i className=\"fas fa-plus\"></i> Create New Staff\n          </Button>\n        </Col>\n      </Row>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <>\n          <Table striped bordered hover responsive className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>First</th>\n                <th>Last</th>\n                <th>Other</th>\n                <th>Region</th>\n                <th>Branch</th>\n                <th>role</th>\n                <th>Info</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allStaff.map((staff) => (\n                <tr key={staff._id}>\n                  <td></td>\n                  <td>{staff.firstName}</td>\n                  <td>{staff.lastName}</td>\n                  <td>{staff.otherName}</td>\n                  <td>{staff.branch.region}</td>\n                  <td>{staff.branch.name}</td>\n                  <td>{staff.role.toUpperCase()}</td>\n                  <td>\n                    <Link to={`/staff/${staff._id}`}>\n                      <i className=\"fas fa-info-circle\"></i>\n                    </Link>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default StaffListScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/CreateBranchScreen.js",[],"/Users/caleb/Desktop/new-account/frontend/src/screens/LoginScreen.js",[],"/Users/caleb/Desktop/new-account/frontend/src/screens/StaffRegisterScreen.js",["439"],"import React, { useEffect, useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { listBranches } from \"../actions/branchActions\";\nimport { registerStaff } from \"../actions/staffActions\";\nimport { STAFF_REGISTER_RESET } from \"../constants/staffConstants\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst StaffRegisterScreen = ({ history }) => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [otherName, setOtherName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [branch, setBranch] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const staffRegister = useSelector((state) => state.userRegister);\n  const { loading, error, userInfo: staffInfo } = staffRegister;\n\n  const branchList = useSelector((state) => state.branchList);\n  const { branches } = branchList;\n\n  useEffect(() => {\n    if (listBranches) {\n      dispatch(listBranches());\n    }\n    if (staffInfo) {\n      dispatch({ type: STAFF_REGISTER_RESET });\n      history.push(\"/all-staff\");\n    }\n  }, [dispatch, history, staffInfo]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      registerStaff(\n        firstName,\n        lastName,\n        otherName,\n        email,\n        password,\n        passwordConfirm,\n        role,\n        branch\n      )\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-user-tie\"></i> CREATE STAFF\n      </h1>\n      {message && <Message variant=\"danger\">{message}</Message>}\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"first-name\">\n          <Form.Label>First Name:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Surname\"\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"last-name\">\n          <Form.Label>Last Name:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Last Name\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"other-name\">\n          <Form.Label>Other Names:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Any Other Name\"\n            value={otherName}\n            onChange={(e) => setOtherName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"branch\">\n          <Form.Label>Branch:</Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={branch}\n            onChange={(e) => setBranch(e.target.value)}\n          >\n            <option>Choose Branch</option>\n            {branches.map((branch) => (\n              <option key={branch._id} value={branch._id}>\n                {branch.name}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"role\">\n          <Form.Label>Designation:</Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={role}\n            onChange={(e) => setRole(e.target.value)}\n          >\n            <option>Select Designation</option>\n            <option value=\"accounts\">accounts</option>\n            <option value=\"admin\">admin</option>\n            <option value=\"business-manager\">business-manager</option>\n            <option value=\"compliance\">compliance</option>\n            <option value=\"documentation\">documentation</option>\n            <option value=\"hr\">hr</option>\n            <option value=\"ict\">ict</option>\n            <option value=\"investment\">investment</option>\n            <option value=\"lead-accounts\">lead-accounts</option>\n            <option value=\"legal\">legal</option>\n            <option value=\"managing-director\">managing-director</option>\n            <option value=\"president\">president</option>\n            <option value=\"regional-manager\">regional-manager</option>\n            <option value=\"special-duties\">special-duties</option>\n            <option value=\"staff\">staff</option>\n            <option value=\"super-admin\">super-admin</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email:</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter Valid Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Enter Password (>= 8 values)\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"confirm-password\">\n          <Form.Label>Confirm Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Enter Password Again\"\n            value={passwordConfirm}\n            onChange={(e) => setPasswordConfirm(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"primary\" block>\n          Create Staff\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default StaffRegisterScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/StaffDetailScreen.js",["440","441","442","443","444","445"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Row, Col, ListGroup, Card, Image, Button } from 'react-bootstrap';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listStaffDetails } from '../actions/staffActions';\n\nconst StaffDetailScreen = ({ match }) => {\n  const dispatch = useDispatch();\n\n  const staffDetails = useSelector((state) => state.staffDetails);\n  const { loading, error, staff } = staffDetails;\n\n  useEffect(() => {\n    dispatch(listStaffDetails(match.params.id));\n  }, [dispatch, match]);\n  return (\n    <>\n      <Link className=\"btn btn-dark my-3\" to=\"/all-staff\">\n        Go Back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <>\n          <Row className=\"my-3\">\n            <Col className=\"text-center\" md={12}>\n              <h1>{`${staff.firstName} ${staff.lastName} ${\n                staff.otherName || ''\n              }`}</h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={4}>\n              <p>\n                <span className=\"profile-text\">Name:</span>{' '}\n                {`${staff.firstName} ${staff.lastName} ${\n                  staff.otherName || ''\n                }`}\n              </p>\n            </Col>\n\n            <Col md={4}>\n              <p>\n                <span className=\"profile-text\">DESIGNATION:</span> {staff.role}\n              </p>\n            </Col>\n            <Col md={4}>\n              <p>\n                <span className=\"profile-text\">Email:</span> {staff.email}\n              </p>\n            </Col>\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default StaffDetailScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/CreateTopUpScreen.js",["446","447","448","449","450"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button, FormGroup, Card, ListGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { investmentListDetails } from '../actions/investmentActions';\nimport { createTopUp } from '../actions/topUpActions';\nimport { TOPUP_CREATE_RESET } from '../constants/topUpConstants';\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst CreateTopUpScreen = ({ match, history }) => {\n  const [bankPayment, setBankPayment] = useState('');\n  const [topDate, setTopDate] = useState('');\n  const [topUpAmount, setTopUpAmount] = useState('');\n  const [baraNumber, setBaraNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const investmentDetails = useSelector((state) => state.investmentDetails);\n  const { error, loading, investment } = investmentDetails;\n\n  const topUpCreate = useSelector((state) => state.topUpCreate);\n  const {\n    loading: topUpCreateLoading,\n    error: topUpCreateError,\n    topUp,\n  } = topUpCreate;\n\n  useEffect(() => {\n    if (userInfo && userInfo.data.user.role === 'super-admin') {\n      dispatch(investmentListDetails(match.params.id));\n    } else {\n      history.push('/login');\n    }\n  }, [match, dispatch, history, userInfo]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    // const data = new FormData();\n    // data.append('investment', investment._id);\n    // data.append('topUpAmount', topUpAmount);\n    // data.append('createdAt', topDate);\n    // data.append('officialBank', bankPayment);\n    // // data.append('paymentProof', proofPayment);\n    // data.append('createdBy', userInfo.data.user._id);\n\n    dispatch(\n      createTopUp(\n        investment._id,\n        topUpAmount,\n        topDate,\n        bankPayment,\n        userInfo.data.user._id,\n        investment?.customer._id\n      )\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-shekel-sign\"></i> NEW TopUp\n      </h1>\n      {loading ? (\n        <Loader /> ? (\n          error\n        ) : (\n          <Message variant=\"danger\">{error}</Message>\n        )\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Card>\n            <ListGroup>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Contributor Details</h2>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Bara Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"select\"\n                      value={baraNumber}\n                      onChange={(e) => setBaraNumber(e.target.value)}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"branch\">\n                    <Form.Label>Branch:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={investment?.customer?.branch?.name}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"bank-payment\">\n                    <Form.Label>Investment Officer:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`${investment?.investmentOfficer?.firstName} ${\n                        investment?.investmentOfficer?.lastName\n                      } ${investment?.investmentOfficer?.otherName || ''}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"full-name\">\n                    <Form.Label>Full Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={investment?.customer?.fullName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"bank-name\">\n                    <Form.Label>Bank Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={investment?.customer?.bankName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-name\">\n                    <Form.Label>Account Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Enter Account Name\"\n                      value={investment?.customer?.accountName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Enter Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={investment?.customer?.accountNumber}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>New TopUp</h2>\n                  <Form.Group controlId=\"top\">\n                    <Form.Label>Top-Up Date:</Form.Label>\n                    <Form.Control\n                      type=\"date\"\n                      value={topDate}\n                      onChange={(e) => setTopDate(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"topup-amout\">\n                    <Form.Label>TopUp Amount:</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"Enter TopUp Amount\"\n                      value={topUpAmount}\n                      onChange={(e) => setTopUpAmount(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"bank-payment\">\n                    <Form.Label>Bank Paid Into:</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                      value={bankPayment}\n                      onChange={(e) => setBankPayment(e.target.value)}\n                    >\n                      <option value=\"\">Select Bank of Payment</option>\n                      <option value=\"Access Bank Plc\">Access Bank Plc</option>\n                      <option value=\"Guaranty Trust Bank Plc\">\n                        Guaranty Trust Bank Plc\n                      </option>\n                      <option value=\"Sterling Bank Plc\">\n                        Sterling Bank Plc\n                      </option>\n                      <option value=\"SunTrust Bank Nigeria Limited\">\n                        SunTrust Bank Nigeria Limited\n                      </option>\n                      <option value=\"United Bank for Africa Plc\">\n                        United Bank for Africa Plc\n                      </option>\n                      <option value=\"Unity Bank Plc\">Unity Bank Plc</option>\n                      <option value=\"Wema Bank Plc\">Wema Bank Plc</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group>\n                    <Form.File\n                      id=\"custom-file\"\n                      custom\n                      label=\"Upload Proof of TopUp Payment\"\n                    />\n                  </Form.Group>\n                  <Form.Group controlId=\"bank-payment\">\n                    <Form.Label>Created By:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`${userInfo.data.user.firstName} ${\n                        userInfo.data.user.lastName\n                      } ${userInfo.data.user.otherName || ''}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n            </ListGroup>\n          </Card>\n\n          <Button type=\"submit\" variant=\"primary\" block>\n            Create Top-Up\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default CreateTopUpScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorRegisterScreen.js",["451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, FormGroup, ListGroup, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { listBranches } from \"../actions/branchActions\";\nimport { createContributor } from \"../actions/contributorActions\";\nimport {\n  CONTRIBUTOR_CREATE_RESET,\n  CONTRIBUTOR_DETAILS_RESET,\n} from \"../constants/contributorConstants\";\nimport { INVESTMENT_CREATE_RESET } from \"../constants/investmentConstants\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst ContributorRegisterScreen = ({ history }) => {\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [busStop, setBusStop] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [stateResidence, setStateResidence] = useState(\"\");\n  const [nationality, setNationality] = useState(\"\");\n  const [stateOrigin, setStateOrigin] = useState(\"\");\n  const [lga, setLga] = useState(\"\");\n  const [company, setCompany] = useState(false);\n  const [occupation, setOccupation] = useState(\"\");\n  const [organisation, setOrganisation] = useState(\"\");\n  const [meansIdentification, setMeansIdentification] = useState(\"\");\n  const [kinName, setKinName] = useState(\"\");\n  const [kinPhone, setKinPhone] = useState(\"\");\n  const [kinAddress, setKinAddress] = useState(\"\");\n  const [branch, setBranch] = useState(\"\");\n  const [dob, setDob] = useState(\"\");\n  const [minor, setMinor] = useState(false);\n  const [gender, setGender] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [maritalStatus, setMaritalStatus] = useState(\"\");\n  const [bankName, setBankName] = useState(\"\");\n  const [accountName, setAccountName] = useState(\"\");\n  const [accountNumber, setAccountNumber] = useState(\"\");\n  const [accountOfficer, setAccountOfficer] = useState(\"\");\n\n  const [createdBy, setCreatedBy] = useState(\n    `${userInfo.data.user.firstName} ${userInfo.data.user.lastName} ${\n      userInfo.data.user.otherName || \"\"\n    }`\n  );\n\n  const dispatch = useDispatch();\n\n  const branchList = useSelector((state) => state.branchList);\n  const { branches } = branchList;\n\n  const staffList = useSelector((state) => state.staffList);\n  const { staffs } = staffList;\n\n  const contributorCreate = useSelector((state) => state.contributorCreate);\n  const { loading, error, contributor, success } = contributorCreate;\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    dispatch({ type: INVESTMENT_CREATE_RESET });\n    // dispatch({ type: CONTRIBUTOR_DETAILS_RESET });\n    dispatch(listBranches());\n    if (success) {\n      history.push(`/contribution/new-contribution/${contributor._id}`);\n      dispatch({ type: CONTRIBUTOR_CREATE_RESET });\n    }\n  }, [dispatch, history, contributor._id, success]);\n  // if (contributor === {}) {\n  //   history.push(`/contribution/new-contribution/${contributor._id}`);\n  //   dispatch({ type: CONTRIBUTOR_CREATE_RESET });\n  // }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      createContributor(\n        userInfo.data.user.branch._id,\n        fullName,\n        minor,\n        company,\n        maritalStatus,\n        gender,\n        phone,\n        email,\n        dob,\n        occupation,\n        organisation,\n        meansIdentification,\n        address,\n        busStop,\n        city,\n        stateResidence,\n        nationality,\n        stateOrigin,\n        lga,\n        kinName,\n        kinPhone,\n        kinAddress,\n        bankName,\n        accountName,\n        accountNumber,\n        createdBy\n      )\n    );\n  };\n\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-users\"></i> NEW CONTRIBUTOR\n      </h1>\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n      <Form onSubmit={submitHandler}>\n        <Card>\n          <ListGroup>\n            <Card.Body>\n              <ListGroup.Item>\n                <h2>Basic Information</h2>\n                <Form.Group controlId=\"branch\">\n                  <Form.Label>Branch Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={userInfo?.data?.user?.branch?.name}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"name\">\n                  <Form.Label>Name of Contributor:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Full Name\"\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <FormGroup>\n                  <Form.Check\n                    label=\"Minor\"\n                    type=\"checkbox\"\n                    checked={minor}\n                    onChange={(e) => setMinor(e.target.checked)}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <Form.Check\n                    label=\"Company\"\n                    type=\"checkbox\"\n                    checked={company}\n                    onChange={(e) => setCompany(e.target.checked)}\n                  />\n                </FormGroup>\n\n                <Form.Group controlId=\"phone\">\n                  <Form.Label>Phone:</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter Valid Phone Number\"\n                    value={phone}\n                    onChange={(e) => setPhone(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n              </ListGroup.Item>\n            </Card.Body>\n\n            <Card.Body>\n              <ListGroup.Item>\n                <h2>Bank Details</h2>\n                <Form.Group controlId=\"bank-name\">\n                  <Form.Label>Bank Name:</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={bankName}\n                    onChange={(e) => setBankName(e.target.value)}\n                  >\n                    <option value=\"\">Select Bank</option>\n                    <option value=\"Access Bank Plc\">Access Bank Plc</option>\n                    <option value=\"Citibank Nigeria Limited\">\n                      Citibank Nigeria Limited\n                    </option>\n                    <option value=\"Coronation Merchant Bank\">\n                      Coronation Merchant Bank\n                    </option>\n                    <option value=\"Ecobank Nigeria Plc\">\n                      Ecobank Nigeria Plc\n                    </option>\n                    <option value=\"FBNQuest Merchant Bank\">\n                      FBNQuest Merchant Bank\n                    </option>\n                    <option value=\"Fidelity Bank Plc\">Fidelity Bank Plc</option>\n                    <option value=\"Finca Microfinance Bank Limited\">\n                      Finca Microfinance Bank Limited\n                    </option>\n                    <option value=\"First Bank of Nigeria Limited\">\n                      First Bank of Nigeria Limited\n                    </option>\n                    <option value=\"First City Monument Bank Limited\">\n                      First City Monument Bank Limited\n                    </option>\n                    <option value=\"FSDH Merchant Bank\">\n                      FSDH Merchant Bank\n                    </option>\n                    <option value=\"Globus Bank Limited\">\n                      Globus Bank Limited\n                    </option>\n                    <option value=\"Guaranty Trust Bank Plc\">\n                      Guaranty Trust Bank Plc\n                    </option>\n                    <option value=\"Heritage Banking Company Limited\">\n                      Heritage Banking Company Limited\n                    </option>\n                    <option value=\"Jaiz Bank Plc\">Jaiz Bank Plc</option>\n                    <option value=\"Keystone Bank Limited\">\n                      Keystone Bank Limited\n                    </option>\n                    <option value=\"Mutual Trust Microfinance Bank\">\n                      Mutual Trust Microfinance Bank\n                    </option>\n                    <option value=\"Nova Merchant Bank\">\n                      Nova Merchant Bank\n                    </option>\n                    <option value=\"Polaris Bank Limited\">\n                      Polaris Bank Limited.\n                    </option>\n                    <option value=\"Providus Bank Limited\">\n                      Providus Bank Limited\n                    </option>\n                    <option value=\"Rand Merchant Bank\">\n                      Rand Merchant Bank\n                    </option>\n                    <option value=\"Stanbic IBTC Bank Plc\">\n                      Stanbic IBTC Bank Plc\n                    </option>\n                    <option value=\"Standard Chartered\">\n                      Standard Chartered\n                    </option>\n                    <option value=\"Sterling Bank Plc\">Sterling Bank Plc</option>\n                    <option value=\"SunTrust Bank Nigeria Limited\">\n                      SunTrust Bank Nigeria Limited\n                    </option>\n                    <option value=\"TAJBank Limited\">TAJBank Limited</option>\n                    <option value=\"Titan Trust Bank Limited\">\n                      Titan Trust Bank Limited\n                    </option>\n                    <option value=\"Union Bank of Nigeria Plc\">\n                      Union Bank of Nigeria Plc\n                    </option>\n                    <option value=\"United Bank for Africa Plc\">\n                      United Bank for Africa Plc\n                    </option>\n                    <option value=\"Unity Bank Plc\">Unity Bank Plc</option>\n                    <option value=\"Wema Bank Plc\">Wema Bank Plc</option>\n                    <option value=\"Zenith Bank Plc\">Zenith Bank Plc</option>\n                  </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"account-name\">\n                  <Form.Label>Account Name:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Account Name\"\n                    value={accountName}\n                    onChange={(e) => setAccountName(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"account-number\">\n                  <Form.Label>Enter Account Number:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter correct Account Number\"\n                    value={accountNumber}\n                    onChange={(e) => setAccountNumber(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n              </ListGroup.Item>\n            </Card.Body>\n\n            <Button type=\"submit\" variant=\"primary\" block>\n              Register New Contributor\n            </Button>\n          </ListGroup>\n        </Card>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ContributorRegisterScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/HomeScreen.js",["476","477","478"],"import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { Card, ListGroup, Table, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { listAllInvestments } from '../actions/investmentActions';\nimport { listAllContributors } from '../actions/contributorActions';\nimport { listAllTopUps } from '../actions/topUpActions';\nimport { INVESTMENT_CONFIRM_RESET } from '../constants/investmentConstants';\n\nconst HomeScreen = () => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const contributorList = useSelector((state) => state.contributorList);\n  const {\n    loading: contributorLoading,\n    error: contributorError,\n    allContributors,\n  } = contributorList;\n  const topUpList = useSelector((state) => state.topUpList);\n  const { loading: topUpLoading, error: topUpError, allTopUps } = topUpList;\n\n  const investmentList = useSelector((state) => state.investmentList);\n  const { loading, error, allInvestments } = investmentList;\n\n  const numberComma = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  const unverifiedTopUp = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter((unverifiedTopUp) => unverifiedTopUp.topUpVerified === false);\n\n  const noTopUpReceipt = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noTopReceipt) =>\n        noTopReceipt.topUpVerified === true &&\n        noTopReceipt.invoicePrepared === false\n    );\n\n  const noTopUpMou = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noTopReceipt) =>\n        noTopReceipt.topUpVerified === true &&\n        noTopReceipt.invoicePrepared === true &&\n        noTopReceipt.mouPrepared === false\n    );\n\n  const unverifiedInvestment = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (unverifiedInvestment) =>\n        unverifiedInvestment.investmentVerified === false\n    );\n  const receipt = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noReceipt) =>\n        noReceipt.investmentVerified === true &&\n        noReceipt.invoicePrepared === false\n    );\n\n  const mou = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noMou) =>\n        noMou.investmentVerified === true &&\n        noMou.invoicePrepared === true &&\n        noMou.mouPrepared === false\n    );\n\n  useEffect(() => {\n    dispatch({ type: INVESTMENT_CONFIRM_RESET });\n    dispatch(listAllInvestments());\n    dispatch(listAllTopUps());\n    dispatch(listAllContributors());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Welcome {userInfo.data.user.lastName}</h1>\n      <>\n        <Card>\n          <ListGroup>\n            {/*TO CHECK THAT ROLE IS ASSIGNED TO ONLY SPECIAL DUTIES */}\n            {(userInfo.data.user.role === 'special-duties' ||\n              userInfo.data.user.role === 'super-admin') && (\n              <>\n                <Card.Body>\n                  <h2>UnConfirmed Contributions</h2>\n                  <ListGroup.Item>\n                    {loading ? (\n                      <Loader />\n                    ) : error ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of Application{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Investment Officer </th>\n                            <th>Bank of Payment </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {unverifiedInvestment.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No Unconfirmed Contribution</td>\n                            </tr>\n                          ) : (\n                            unverifiedInvestment?.map((invest) => (\n                              <tr key={invest._id}>\n                                <td></td>\n                                <td>{invest.customer?.fullName}</td>\n                                <td>\n                                  {moment(invest.createdAt).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>N{numberComma(invest.investmentAmount)}</td>\n                                <td>{`${invest.investmentOfficer?.firstName} ${\n                                  invest.investmentOfficer?.lastName\n                                } ${\n                                  invest.investmentOfficer?.otherName || ''\n                                }`}</td>\n                                <td>{invest.officialBank}</td>\n                                <td>{invest.type}</td>\n                                <td>\n                                  {userInfo.data.user.role ===\n                                    'special-duties' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link\n                                      to={`/contribution/confirm-contribution/${invest?._id}`}\n                                    >\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n\n                <Card.Body>\n                  <h2>UnConfirmed TopUps</h2>\n                  <ListGroup.Item>\n                    {topUpLoading ? (\n                      <Loader />\n                    ) : topUpError ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of TopUp{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Bank of Payment </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {unverifiedTopUp.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No Unconfirmed Top-up</td>\n                            </tr>\n                          ) : (\n                            unverifiedTopUp?.map((topUp) => (\n                              <tr key={topUp._id}>\n                                <td></td>\n                                <td>{topUp.customer?.fullName}</td>\n                                <td>\n                                  {moment(topUp.createdAt).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>N{numberComma(topUp.topUpAmount)}</td>\n                                <td>{topUp.officialBank}</td>\n                                <td>{topUp.type}</td>\n                                <td>\n                                  {userInfo.data.user.role ===\n                                    'special-duties' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link\n                                      to={`topup/verify-contribution/${topUp?._id}`}\n                                    >\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n\n                {/*RECEIPT CHECK*/}\n\n                {/*RECEIPT CHECK*/}\n              </>\n            )}\n\n            {(userInfo.data.user.role === 'accounts' ||\n              userInfo.data.user.role === 'super-admin') && (\n              <>\n                <Card.Body>\n                  <h2>GENERATE RECEIPTS (CONTRIBUTION)</h2>\n                  <ListGroup.Item>\n                    {loading ? (\n                      <Loader />\n                    ) : error ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of Investment{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Investment Duration </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {receipt.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No receipt to Generate</td>\n                            </tr>\n                          ) : (\n                            receipt?.map((newReceipt) => (\n                              <tr key={newReceipt._id}>\n                                <td></td>\n                                <td>{newReceipt.customer?.fullName}</td>\n                                <td>\n                                  {moment(newReceipt.dateInvestVerify).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>\n                                  N{numberComma(newReceipt.investmentAmount)}\n                                </td>\n                                <td>{`${newReceipt.investmentDuration} months`}</td>\n                                <td>{newReceipt.type}</td>\n                                <td>\n                                  {userInfo.data.user.role === 'accounts' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link\n                                      to={`/contribution/receipt/${newReceipt?._id}`}\n                                    >\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n                <Card.Body>\n                  <h2>GENERATE RECEIPTS (TOPUP)</h2>\n                  <ListGroup.Item>\n                    {loading ? (\n                      <Loader />\n                    ) : error ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of TopUp{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Investment Duration </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {receipt.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No receipt to Generate</td>\n                            </tr>\n                          ) : (\n                            noTopUpReceipt?.map((newReceipt) => (\n                              <tr key={newReceipt._id}>\n                                <td></td>\n                                <td>{newReceipt.customer?.fullName}</td>\n                                <td>\n                                  {moment(newReceipt.dateTopUpVerify).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>N{numberComma(newReceipt.topUpAmount)}</td>\n                                <td>{`${newReceipt.investmentDuration} months`}</td>\n                                <td>{newReceipt.type}</td>\n                                <td>\n                                  {userInfo.data.user.role === 'accounts' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link\n                                      to={`/topup/receipt/${newReceipt?._id}`}\n                                    >\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n              </>\n            )}\n\n            {(userInfo.data.user.role === 'legal' ||\n              userInfo.data.user.role === 'super-admin') && (\n              <>\n                <Card.Body>\n                  <h2>GENERATE MOU (INVESTMENT)</h2>\n                  <ListGroup.Item>\n                    {loading ? (\n                      <Loader />\n                    ) : error ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of Investment{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Investment Duration </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {mou.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No MOU to Generate</td>\n                            </tr>\n                          ) : (\n                            mou?.map((newMou) => (\n                              <tr key={newMou._id}>\n                                <td></td>\n                                <td>{newMou.customer?.fullName}</td>\n                                <td>\n                                  {moment(newMou.dateInvestVerify).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>\n                                  N{numberComma(newMou.totalAmountInvested)}\n                                </td>\n                                <td>{`${newMou.investmentDuration} months`}</td>\n                                <td>{newMou.type}</td>\n                                <td>\n                                  {userInfo.data.user.role === 'legal' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link\n                                      to={`/contribution/legal/${newMou?._id}`}\n                                    >\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n\n                <Card.Body>\n                  <h2>GENERATE MOU (TOPUP)</h2>\n                  <ListGroup.Item>\n                    {loading ? (\n                      <Loader />\n                    ) : error ? (\n                      <Message variant=\"danger\">{error}</Message>\n                    ) : (\n                      <Table\n                        striped\n                        bordered\n                        hover\n                        responsive\n                        className=\"table-sm\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>\n                              Full Name{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>\n                              Date of Investment{' '}\n                              <Button className=\"btn btn-light\">\n                                <i className=\"fas fa-sort\"></i>\n                              </Button>\n                            </th>\n                            <th>Amount</th>\n                            <th>Investment Duration </th>\n                            <th>Type </th>\n                            <th>More</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {noTopUpMou?.length === 0 ? (\n                            <tr>\n                              <td></td>\n                              <td colSpan=\"7\">No MOU to Generate</td>\n                            </tr>\n                          ) : (\n                            noTopUpMou?.map((newMou) => (\n                              <tr key={newMou._id}>\n                                <td></td>\n                                <td>{newMou.customer?.fullName}</td>\n                                <td>\n                                  {moment(newMou.dateTopUpVerify).format(\n                                    'Do MMMM YYYY'\n                                  )}\n                                </td>\n                                <td>N{numberComma(newMou.topUpAmount)}</td>\n                                <td>{`${newMou.investment.investmentDuration} months`}</td>\n                                <td>{newMou.type}</td>\n                                <td>\n                                  {userInfo.data.user.role === 'legal' ||\n                                  userInfo.data.user.role === 'super-admin' ? (\n                                    <Link to={`/topup/legal/${newMou?._id}`}>\n                                      <i className=\"fas fa-info-circle\"></i>\n                                    </Link>\n                                  ) : (\n                                    'Not Authorised'\n                                  )}\n                                </td>\n                              </tr>\n                            ))\n                          )}\n                        </tbody>\n                      </Table>\n                    )}\n                  </ListGroup.Item>\n                </Card.Body>\n              </>\n            )}\n            {/* THIS IS COMMENTED OUT\n            {(userInfo.data.user.role === 'investment' ||\n              userInfo.data.user.role === 'super-admin') && (\n              <Card.Body>\n                <h2>Contributors with no Contributions</h2>\n                <ListGroup.Item>\n                  {loading ? (\n                    <Loader />\n                  ) : error ? (\n                    <Message variant=\"danger\">{error}</Message>\n                  ) : (\n                    <Table\n                      striped\n                      bordered\n                      hover\n                      responsive\n                      className=\"table-sm\"\n                    >\n                      <thead>\n                        <tr>\n                          <th>#</th>\n                          <th>\n                            Full Name{' '}\n                            <Button className=\"btn btn-light\">\n                              <i className=\"fas fa-sort\"></i>\n                            </Button>\n                          </th>\n                          <th>\n                            Date of Application{' '}\n                            <Button className=\"btn btn-light\">\n                              <i className=\"fas fa-sort\"></i>\n                            </Button>\n                          </th>\n                          <th>Amount</th>\n                          <th>Investment Officer </th>\n                          <th>Type </th>\n                          <th>More</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {allContributors\n                          .?filter(\n                            (contributor) =>\n                              contributor?.branch?.name ===\n                              userInfo.data.user?.branch?.name\n                          )\n                          ?.map((customer) => (\n                            <tr key={customer._id}>\n                              <td></td>\n                              <td>{customer.customer?.fullName}</td>\n                              <td>\n                                {moment(customer.createdAt).format(\n                                  'Do MMMM YYYY'\n                                )}\n                              </td>\n                              <td></td>\n                              <td>{`${customer.investmentOfficer?.firstName} ${\n                                customer.investmentOfficer?.lastName\n                              } ${\n                                customer.investmentOfficer?.otherName || ''\n                              }`}</td>\n                              <td>{customer.type}</td>\n                              <td>\n                                {userInfo.data.user.role === 'investment' ||\n                                userInfo.data.user.role === 'super-admin' ? (\n                                  <Link\n                                    to={`/contribution/confirm-contribution/${customer?._id}`}\n                                  >\n                                    <i className=\"fas fa-info-circle\"></i>\n                                  </Link>\n                                ) : (\n                                  'Not Authorised'\n                                )}\n                              </td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  )}\n                </ListGroup.Item>\n              </Card.Body>\n            )}\n          */}\n          </ListGroup>\n        </Card>\n      </>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/components/Footer.js",[],"/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorListScreen.js",["479"],"import React, { useEffect } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Table, Button, Row, Col, Form, FormControl } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { listAllContributorsSearch } from \"../actions/contributorActions\";\n\nconst ContributorListScreen = ({ history }) => {\n  const [formSearch, setFormSearch] = \"\";\n  const dispatch = useDispatch();\n\n  const contributorList = useSelector((state) => state.contributorList);\n  const { loading, error, allContributors } = contributorList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    // if (!userInfo || !(userInfo.data.user.role === 'super-admin')) {\n    //   history.push('/login');\n    // }\n    dispatch(listAllContributorsSearch());\n  }, [dispatch, history, userInfo, formSearch]);\n\n  const createContributorHandler = () => {\n    history.push(\"/contribution/new-contributor\");\n  };\n  return (\n    <>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1>CONTRIBUTORS</h1>\n        </Col>\n      </Row>\n\n      <Form block>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search\"\n          value={formSearch}\n          onChange={setFormSearch}\n        />\n        <Button className=\"btn btn-dark my-3\">Search</Button>\n      </Form>\n\n      <Row className=\"align-items-center\">\n        <Col></Col>\n        <Col className=\"text-right\">\n          <Button className=\"my-3\" onClick={createContributorHandler}>\n            <i className=\"fas fa-plus\"></i> Create New Contributor\n          </Button>\n        </Col>\n      </Row>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <>\n          <Table striped bordered hover responsive className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  Full Name <i className=\"fas fa-sort\"></i>\n                </th>\n                <th>Branch</th>\n                <th>Gender</th>\n                <th>Info</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allContributors\n                .filter(\n                  (contributor) =>\n                    contributor.branch?.name ===\n                    userInfo.data.user?.branch?.name\n                )\n                .map((contributor) => (\n                  <tr key={contributor._id}>\n                    <td></td>\n                    <td>{contributor.fullName}</td>\n                    <td>{contributor.branch.name}</td>\n                    <td>{contributor.gender}</td>\n                    <td>\n                      <Link to={`/contributor/${contributor._id}`}>\n                        <i className=\"fas fa-info-circle\"></i>\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ContributorListScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributionConfirmScreen.js",["480","481","482","483","484"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, FormGroup, Card, ListGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport moment from \"moment\";\nimport { INVESTMENT_CONFIRM_RESET } from \"../constants/investmentConstants\";\nimport {\n  investmentConfirm,\n  investmentListDetails,\n} from \"../actions/investmentActions\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst ContributionConfirmScreen = ({ match, history }) => {\n  const [bankPayment, setBankPayment] = useState(\"\");\n  const [dateConfirm, setDateConfirm] = useState(\"\");\n  const [baraNumber, setBaraNumber] = useState(\"\");\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [note, setNote] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const investmentDetails = useSelector((state) => state.investmentDetails);\n  const { loading, error, investment } = investmentDetails;\n  const investmentConfirmed = useSelector((state) => state.investmentConfirm);\n  const {\n    loading: loadingConfirm,\n    error: errorConfirm,\n    success,\n    investment: confirmInvestment,\n  } = investmentConfirmed;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(investmentListDetails(match.params.id));\n    if (confirmInvestment) {\n      window.alert(`Contribution Confirmed`);\n      dispatch({ type: INVESTMENT_CONFIRM_RESET });\n      history.push(\"/\");\n    }\n  }, [match, dispatch, confirmInvestment, history]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (isConfirmed === true && dateConfirm !== \"\") {\n      const paymentDates = [];\n      for (let i = 1; i <= investment.investmentDuration; i += 1) {\n        paymentDates.push(\n          moment(dateConfirm)\n            .add(i, \"months\")\n            // .add(1, 'days')\n            .format(\"YYYY-MM-DD\")\n        );\n      }\n      dispatch(\n        investmentConfirm(\n          investment._id,\n          isConfirmed,\n          dateConfirm,\n          userInfo.data.user._id,\n          paymentDates,\n          note\n        )\n      );\n      // history.push('/');\n    }\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-check-double\"></i> Confirm Payment\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          {investment.investmentVerified === false ? (\n            <>\n              <Form onSubmit={submitHandler}>\n                <Card>\n                  <ListGroup>\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Contributor Details</h2>\n                        <Form.Group controlId=\"branch\">\n                          <Form.Label>Branch:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.customer?.branch?.name}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"account-number\">\n                          <Form.Label>Bara Account Number:</Form.Label>\n                          <Form.Control\n                            type=\"select\"\n                            value={baraNumber}\n                            onChange={(e) => setBaraNumber(e.target.value)}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"full-name\">\n                          <Form.Label>Contributor's Full Name:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            placeholder=\"Full Name\"\n                            value={investment?.customer?.fullName}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"bank-name\">\n                          <Form.Label>Bank Name:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.customer?.bankName}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"account-name\">\n                          <Form.Label>Account Name:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.customer?.accountName}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"account-number\">\n                          <Form.Label>Account Number:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.customer?.accountNumber}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"bank-payment\">\n                          <Form.Label>Bank Paid Into:</Form.Label>\n                          <Form.Control\n                            as=\"select\"\n                            value={bankPayment}\n                            onChange={(e) => setBankPayment(e.target.value)}\n                            disabled\n                          >\n                            <option value=\"access\">Access Bank Plc</option>\n                            <option value=\"gtb\">Guaranty Trust Bank Plc</option>\n                            <option value=\"sterling\">Sterling Bank Plc</option>\n                            <option value=\"suntrust\">\n                              SunTrust Bank Nigeria Limited\n                            </option>\n                            <option value=\"uba\">\n                              United Bank for Africa Plc\n                            </option>\n                            <option value=\"\" unity>\n                              Unity Bank Plc\n                            </option>\n                            <option value=\"wema\">Wema Bank Plc</option>\n                          </Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"confirmed-amout\">\n                          <Form.Label>Amount to Confirm:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={`N${investment?.investmentAmount\n                              ?.toString()\n                              .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"type\">\n                          <Form.Label>Contribution Type:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.type}\n                          ></Form.Control>\n                        </Form.Group>\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Confirmation</h2>\n\n                        <Form.Group controlId=\"is-confirmed\">\n                          <Form.Check\n                            type=\"checkbox\"\n                            label=\"Confirm?\"\n                            checked={isConfirmed}\n                            onChange={(e) => setIsConfirmed(e.target.checked)}\n                          ></Form.Check>\n                        </Form.Group>\n                        <Form.Group controlId=\"confirm-date\">\n                          <Form.Label>Confirmation Date:</Form.Label>\n                          <Form.Control\n                            type=\"date\"\n                            value={dateConfirm}\n                            onChange={(e) => setDateConfirm(e.target.value)}\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"confirm-note\">\n                          <Form.Label>Note:</Form.Label>\n                          <Form.Control\n                            as=\"textarea\"\n                            placeholder=\"Optional\"\n                            value={note}\n                            rows={3}\n                            onChange={(e) => setNote(e.target.value)}\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"bank-payment\">\n                          <Form.Label>Confirmed By:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={`${userInfo.data.user.firstName} ${\n                              userInfo.data.user.lastName\n                            } ${userInfo.data.user.otherName || \"\"}`}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                      </ListGroup.Item>\n                    </Card.Body>\n                  </ListGroup>\n                </Card>\n\n                <Button type=\"submit\" variant=\"primary\" block>\n                  Confirm\n                </Button>\n              </Form>\n            </>\n          ) : (\n            <Message variant=\"danger\">Contribution is already verified</Message>\n          )}\n        </>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default ContributionConfirmScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/AllTopUpsScreen.js",["485","486","487","488","489"],"import { moment } from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, ListGroup, Card, Image, Button } from 'react-bootstrap';\nimport { investmentListDetails } from '../actions/investmentActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n\nconst ContributorDetailsScreen = ({ history, match }) => {\n  const dispatch = useDispatch();\n\n  const numberComma = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  const investmentDetails = useSelector((state) => state.investmentDetails);\n  const {\n    loading: investmentLoading,\n    error: investmentError,\n    investment,\n  } = investmentDetails;\n  useEffect(() => {\n    dispatch(investmentListDetails(match.params.id));\n  }, [dispatch, match]);\n\n  return (\n    <>\n      <Link className=\"btn btn-light my-3\" to=\"/all-contributors\">\n        Go Back\n      </Link>\n      {investmentLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <Card>\n            <ListGroup>\n              <h2 className=\"text-center\">All TopUps</h2>\n\n              {investment.topups?.length > 0 &&\n                investment.topups !== undefined &&\n                investment.topups.map((topup) => (\n                  <Card.Body>\n                    <ListGroup.Item>\n                      <div key={topup._id}>\n                        <Row>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                TopUp Amount:\n                              </span>{' '}\n                              {`N${numberComma(topup.topUpAmount)}`}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                TopUp Verified:\n                              </span>{' '}\n                              {topup.topUpVerified ? (\n                                <span>True</span>\n                              ) : (\n                                <span>False</span>\n                              )}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                TopUp Verified Date:\n                              </span>{' '}\n                              {topup.dateTopUpVerify || ''}\n                            </p>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col md={4}></Col>\n                          <Col md={4}></Col>\n                          <Col md={4}>\n                            <p>\n                              {topup.topUpVerified ? (\n                                <LinkContainer\n                                  to={`/topup/verify-contribution/${topup._id}`}\n                                >\n                                  <Button block disabled>\n                                    Verify TopUp\n                                  </Button>\n                                </LinkContainer>\n                              ) : (\n                                <LinkContainer\n                                  to={`/topup/verify-contribution/${topup._id}`}\n                                >\n                                  <Button block>Verify TopUp</Button>\n                                </LinkContainer>\n                              )}\n                            </p>\n                          </Col>\n                        </Row>\n                      </div>\n                    </ListGroup.Item>\n                  </Card.Body>\n                ))}\n            </ListGroup>\n          </Card>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ContributorDetailsScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ReceiptGeneratorScreen.js",["490","491"],"import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Form, Button, FormGroup, Card, ListGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport {\n  receiptGenerate,\n  investmentListDetails,\n} from '../actions/investmentActions';\nimport { RECEIPT_CREATE_RESET } from '../constants/investmentConstants';\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst ReceiptGeneratorScreen = ({ match, history }) => {\n  const [isGenerated, setIsGenerated] = useState(false);\n  const [note, setNote] = useState('');\n\n  const dispatch = useDispatch();\n\n  const investmentDetails = useSelector((state) => state.investmentDetails);\n  const { loading, error, investment } = investmentDetails;\n\n  const receiptGenerated = useSelector((state) => state.receiptGenerate);\n  const { success } = receiptGenerated;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(investmentListDetails(match.params.id));\n    if (success) {\n      window.alert(`Receipt has been generated`);\n      dispatch({ type: RECEIPT_CREATE_RESET });\n      history.push('/');\n    }\n  }, [match, dispatch, history, success]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      receiptGenerate(\n        investment._id,\n        isGenerated,\n        userInfo.data.user._id,\n        moment().format(),\n        `${userInfo.data.user.firstName} ${userInfo.data.user.lastName} ${\n          userInfo.data.user.otherName || ''\n        }`,\n        note\n      )\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i class=\"fas fa-receipt\"></i> Generate Receipt\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          {investment.investmentVerified === true &&\n          investment.invoicePrepared === false ? (\n            <>\n              <Form onSubmit={submitHandler}>\n                <Card>\n                  <ListGroup>\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Contributor Details</h2>\n                        <Form.Group controlId=\"branch\">\n                          <Form.Label>Branch:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.customer?.branch?.name}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"account-number\">\n                          <Form.Label>Bara Account Number:</Form.Label>\n                          <Form.Control\n                            type=\"select\"\n                            value={investment?.customer?.baraNumber}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"full-name\">\n                          <Form.Label>Contributor's Full Name:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            placeholder=\"Full Name\"\n                            value={investment?.customer?.fullName}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"address\">\n                          <Form.Label>Contributor's Address:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            placeholder=\"Address\"\n                            value={investment?.customer?.address}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"receipt-amout\">\n                          <Form.Label>Amount to Generate Receipt:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={`N${investment?.investmentAmount\n                              ?.toString()\n                              .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"type\">\n                          <Form.Label>Contribution Type:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={investment?.type}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Receipt</h2>\n\n                        <Form.Group controlId=\"is-confirmed\">\n                          <Form.Check\n                            type=\"checkbox\"\n                            label=\"Generate Receipt?\"\n                            checked={isGenerated}\n                            onChange={(e) => setIsGenerated(e.target.checked)}\n                          ></Form.Check>\n                        </Form.Group>\n                        <Form.Group controlId=\"confirm-note\">\n                          <Form.Label>Note:</Form.Label>\n                          <Form.Control\n                            as=\"textarea\"\n                            placeholder=\"Optional\"\n                            value={note}\n                            rows={3}\n                            onChange={(e) => setNote(e.target.value)}\n                          ></Form.Control>\n                        </Form.Group>\n                        <Form.Group controlId=\"bank-payment\">\n                          <Form.Label>Generated By:</Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={`${userInfo.data.user.firstName} ${\n                              userInfo.data.user.lastName\n                            } ${userInfo.data.user.otherName || ''}`}\n                            disabled\n                          ></Form.Control>\n                        </Form.Group>\n                      </ListGroup.Item>\n                    </Card.Body>\n                  </ListGroup>\n                </Card>\n\n                <Button type=\"submit\" variant=\"primary\" block>\n                  Generate Receipt\n                </Button>\n              </Form>\n            </>\n          ) : (\n            <Message variant=\"danger\">\n              You can't generate receipt at this time\n            </Message>\n          )}\n        </>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default ReceiptGeneratorScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/DuePaymentsScreen.js",[],"/Users/caleb/Desktop/new-account/frontend/src/screens/LegalMOUScreen.js",["492","493"],"import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Form, Button, FormGroup, Card, ListGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport {\n  mouGenerate,\n  investmentListDetails,\n} from '../actions/investmentActions';\nimport { MOU_CREATE_RESET } from '../constants/investmentConstants';\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst LegalMOUScreen = ({ match, history }) => {\n  const [isGenerated, setIsGenerated] = useState(false);\n  const [note, setNote] = useState('');\n\n  const dispatch = useDispatch();\n\n  const investmentDetails = useSelector((state) => state.investmentDetails);\n  const { loading, error, investment } = investmentDetails;\n\n  const mouGenerated = useSelector((state) => state.mouGenerate);\n  const { success } = mouGenerated;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(investmentListDetails(match.params.id));\n    if (success) {\n      window.alert(`MOU has been successfully generated`);\n      dispatch({ type: MOU_CREATE_RESET });\n      history.push('/');\n    }\n  }, [match, dispatch, history, success]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (\n      investment.investmentVerified === false ||\n      investment.invoicePrepared === false\n    ) {\n      window.alert('You cannot perform this action now');\n    } else {\n      if (isGenerated === false) {\n        window.alert('Please generate mou');\n      } else {\n        dispatch(\n          mouGenerate(\n            investment._id,\n            isGenerated,\n            userInfo.data.user._id,\n            moment().format(),\n            note\n          )\n        );\n      }\n    }\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-balance-scale\"></i> Generate MOU\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          {investment.investmentVerified === true &&\n          investment.invoicePrepared === true &&\n          investment.mouPrepared === false ? (\n            <Form onSubmit={submitHandler}>\n              <Card>\n                <ListGroup>\n                  <Card.Body>\n                    <ListGroup.Item>\n                      <h2>Client Details</h2>\n                      <Form.Group controlId=\"branch\">\n                        <Form.Label>Branch:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          value={investment?.customer?.branch?.name}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"account-number\">\n                        <Form.Label>Bara Account Number:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          value={investment?.customer?.baraNumber}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"full-name\">\n                        <Form.Label>Client Full Name:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"Full Name\"\n                          value={investment?.customer?.fullName}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"date-birth\">\n                        <Form.Label>Date of Birth:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"Date of Birth\"\n                          value={moment(investment?.customer?.dob).format(\n                            'Do MMMM YYYY'\n                          )}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"address\">\n                        <Form.Label>Address:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"address\"\n                          value={investment?.customer?.address}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"date\">\n                        <Form.Label>Date of Confirmation:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"date\"\n                          value={moment(investment.dateInvestVerify).format(\n                            'Do MMMM YYYY'\n                          )}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n\n                      <Form.Group controlId=\"confirmed-amout\">\n                        <Form.Label>Amount:</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          placeholder=\"Amount\"\n                          value={investment.investmentAmount}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"gender\">\n                        <Form.Label>Gender:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"Gender\"\n                          value={investment?.customer?.gender}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"plan\">\n                        <Form.Label>Investment Plan:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"plan\"\n                          value={`${investment?.investmentDuration} Months`}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                    </ListGroup.Item>\n                  </Card.Body>\n\n                  <Card.Body>\n                    <ListGroup.Item>\n                      <h2>Generate MOU</h2>\n                      <Form.Group controlId=\"is-confirmed\">\n                        <Form.Check\n                          type=\"checkbox\"\n                          label=\"Generate MOU?\"\n                          checked={isGenerated}\n                          onChange={(e) => setIsGenerated(e.target.checked)}\n                        ></Form.Check>\n                      </Form.Group>\n                      <Form.Group controlId=\"Note-note\">\n                        <Form.Label>Note:</Form.Label>\n                        <Form.Control\n                          as=\"textarea\"\n                          placeholder=\"Optional\"\n                          value={note}\n                          rows={3}\n                          onChange={(e) => setNote(e.target.value)}\n                        ></Form.Control>\n                      </Form.Group>\n                      <Form.Group controlId=\"generated-by\">\n                        <Form.Label>Generated By:</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          value={`${userInfo.data.user.firstName} ${\n                            userInfo.data.user.lastName\n                          } ${userInfo.data.user.otherName || ''}`}\n                          disabled\n                        ></Form.Control>\n                      </Form.Group>\n                    </ListGroup.Item>\n                  </Card.Body>\n                </ListGroup>\n              </Card>\n\n              <Button type=\"submit\" variant=\"primary\" block>\n                <i className=\"fas fa-balance-scale-right\"></i> Generate MOU\n              </Button>\n            </Form>\n          ) : (\n            <Message variant=\"danger\">\n              You can't generate MOU at this time\n            </Message>\n          )}\n        </>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default LegalMOUScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorDetailsScreen.js",["494","495","496","497","498","499","500","501"],"import { moment } from \"moment\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col, ListGroup, Card, Image, Button } from \"react-bootstrap\";\nimport { contributorListDetails } from \"../actions/contributorActions\";\nimport { investmentListDetails } from \"../actions/investmentActions\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { CONTRIBUTOR_DETAILS_RESET } from \"../constants/contributorConstants\";\n\nconst ContributorDetailsScreen = ({ history, match }) => {\n  const dispatch = useDispatch();\n\n  const numberComma = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const contributorDetails = useSelector((state) => state.contributorDetails);\n  const { loading, error, contributor } = contributorDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  // const investmentDetails = useSelector((state) => state.investmentDetails);\n  // const {\n  //   loading: investmentLoading,\n  //   error: investmentError,\n  //   investment,\n  // } = investmentDetails;\n\n  useEffect(() => {\n    dispatch(contributorListDetails(match.params.id));\n    // dispatch(investmentListDetails());\n  }, [dispatch, match]);\n\n  return (\n    <>\n      <Link className=\"btn btn-light my-3\" to=\"/all-contributors\">\n        Go Back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <Row className=\"my-3\">\n            <Col className=\"text-center\" md={12}>\n              <h1>\n                {contributor?.fullName} | {contributor?.baraNumber}\n              </h1>\n            </Col>\n          </Row>\n          <Card>\n            <ListGroup>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Basic Information</h2>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Name:</span>{\" \"}\n                        {contributor?.fullName}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Minor:</span>{\" \"}\n                        {contributor?.minor ? (\n                          <span>True</span>\n                        ) : (\n                          <span>False</span>\n                        )}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Branch:</span>{\" \"}\n                        {contributor?.branch?.name}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Email:</span>{\" \"}\n                        {contributor?.email}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Marital Status:</span>{\" \"}\n                        {contributor?.maritalStatus}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Phone:</span>{\" \"}\n                        {`0${contributor?.phone}`}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Gender:</span>{\" \"}\n                        {contributor?.gender}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Date of Birth:</span>{\" \"}\n                        {contributor?.dob?.substring(0, 10)}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">\n                          Means of Identification:\n                        </span>{\" \"}\n                        {contributor?.meansIdentification}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Occupation:</span>{\" \"}\n                        {contributor?.occupation}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Organization:</span>{\" \"}\n                        {contributor?.organisation}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Nationality:</span>{\" \"}\n                        {contributor?.nationality}\n                      </p>\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Address:</span>{\" \"}\n                        {contributor?.address}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Nearest Busstop:</span>{\" \"}\n                        {contributor?.busStop}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">City:</span>{\" \"}\n                        {contributor?.city}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">\n                          State of Residence:\n                        </span>{\" \"}\n                        {contributor?.stateResidence}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">\n                          Local Government Area:\n                        </span>{\" \"}\n                        {contributor?.lga}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">State of Origin:</span>{\" \"}\n                        {contributor?.stateOrigin}\n                      </p>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n              </Card.Body>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Next of Kin Details</h2>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Next of Kin Name:</span>{\" \"}\n                        {contributor?.kinName}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Next of Kin Phone:</span>{\" \"}\n                        {contributor?.kinPhone}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">\n                          Next of Kin Address:\n                        </span>{\" \"}\n                        {contributor?.kinAddress}\n                      </p>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n              </Card.Body>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Bank Details</h2>\n                  <Row>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Bank Name:</span>{\" \"}\n                        {contributor?.bankName}\n                      </p>\n                    </Col>\n\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Account Name:</span>{\" \"}\n                        {contributor?.accountName}\n                      </p>\n                    </Col>\n                    <Col md={4}>\n                      <p>\n                        <span className=\"profile-text\">Account Number:</span>{\" \"}\n                        {contributor?.accountNumber}\n                      </p>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n              </Card.Body>\n              {contributor?.investments?.length === 0 && (\n                <Card.Body>\n                  <ListGroup.Item>\n                    <Row>\n                      <Col md={4}></Col>\n\n                      <Col md={4}></Col>\n\n                      <Col md={4}>\n                        <LinkContainer\n                          to={`/contribution/new-contribution/${contributor._id}`}\n                        >\n                          <Button block>New Contribution</Button>\n                        </LinkContainer>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                </Card.Body>\n              )}\n              {contributor?.investments?.length > 0 &&\n                contributor?.investments !== undefined && (\n                  <>\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Contribution Details</h2>\n                        <Row>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Amount:\n                              </span>{\" \"}\n                              {`N${contributor?.investments[0].investmentAmount\n                                ?.toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Duration:\n                              </span>{\" \"}\n                              {`${contributor?.investments[0].investmentDuration} Months`}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Officer:\n                              </span>{\" \"}\n                              {`${\n                                contributor?.investments[0].investmentOfficer\n                                  ?.firstName || \"\"\n                              } ${\n                                contributor?.investments[0].investmentOfficer\n                                  ?.lastName || \"\"\n                              } ${\n                                contributor?.investments[0].investmentOfficer\n                                  ?.otherName || \"\"\n                              } (${\n                                contributor?.investments[0].investmentOfficer\n                                  ?.branch?.name || \"\"\n                              })`}\n                            </p>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Verified:\n                              </span>{\" \"}\n                              {contributor.investments[0].investmentVerified ? (\n                                <span>True</span>\n                              ) : (\n                                <span>False</span>\n                              )}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Date:\n                              </span>{\" \"}\n                              {contributor?.investments[0].dateInvestVerify?.substring(\n                                0,\n                                10\n                              ) || \"Not Verified\"}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Contribution Percentage:\n                              </span>{\" \"}\n                              {contributor?.investments[0].dateInvestVerify?.substring(\n                                0,\n                                10\n                              ) || \"Not Verified\"}\n                            </p>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col md={4}></Col>\n                          <Col md={4}></Col>\n                          <Col md={4}>\n                            {userInfo.data.user.role === \"special-duties\" && (\n                              <p>\n                                {contributor.investments[0]\n                                  .investmentVerified ? (\n                                  <LinkContainer\n                                    to={`/contribution/confirm-contribution/${contributor._id}`}\n                                  >\n                                    <Button block disabled>\n                                      Verify Contribution\n                                    </Button>\n                                  </LinkContainer>\n                                ) : (\n                                  <LinkContainer\n                                    to={`/contribution/confirm-contribution/${contributor.investments[0]._id}`}\n                                  >\n                                    <Button block>Verify Contribution</Button>\n                                  </LinkContainer>\n                                )}\n                              </p>\n                            )}\n                          </Col>\n                        </Row>\n                      </ListGroup.Item>\n                    </Card.Body>\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <h2>Contribution Summary</h2>\n                        <Row>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                Total Contribution:\n                              </span>{\" \"}\n                              {`N${contributor?.investments[0].totalAmountInvested\n                                ?.toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\">\n                                ROI(Confirmed):\n                              </span>{\" \"}\n                              {`N${contributor?.investments[0].roi\n                                ?.toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                            </p>\n                          </Col>\n                          <Col md={4}>\n                            <p>\n                              <span className=\"profile-text\"></span>\n                            </p>\n                          </Col>\n                        </Row>\n                        <ListGroup.Item>\n                          <h4>ROI DATES</h4>\n                          <Row>\n                            {contributor?.investments[0]?.paymentDates.map(\n                              (date) => (\n                                <p key={date}> {date?.substring(0, 10)} | </p>\n                              )\n                            )}\n                          </Row>\n                        </ListGroup.Item>\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    <Card.Body>\n                      <ListGroup.Item>\n                        <Row>\n                          <Col md={4}>\n                            {contributor?.investments !== undefined && (\n                              <LinkContainer\n                                to={`/all-topups/${contributor.investments[0]._id}`}\n                              >\n                                <Button block disabled>\n                                  All TopUps\n                                </Button>\n                              </LinkContainer>\n                            )}\n                          </Col>\n\n                          <Col md={4}></Col>\n                          {(userInfo.data.user.role === \"investment\" ||\n                            userInfo.data.user.role === \"super-admin\") && (\n                            <Col md={4}>\n                              {contributor?.investments !== undefined && (\n                                <LinkContainer\n                                  to={`/contribution/topup/${contributor.investments[0]._id}`}\n                                >\n                                  <Button block>New TopUp</Button>\n                                </LinkContainer>\n                              )}\n                            </Col>\n                          )}\n                        </Row>\n                      </ListGroup.Item>\n                    </Card.Body>\n                  </>\n                )}\n            </ListGroup>\n          </Card>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ContributorDetailsScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributorAuthScreen.js",["502"],"import React, { useEffect, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listBranches } from '../actions/branchActions';\nimport { registerContributor } from '../actions/authActions';\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst ContributorAuthScreen = () => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [otherName, setOtherName] = useState('');\n  const [email, setEmail] = useState('');\n  const [branch, setBranch] = useState('');\n\n  const dispatch = useDispatch();\n\n  const contributorRegister = useSelector((state) => state.userRegister);\n  const { loading, error, userInfo } = contributorRegister;\n\n  const branchList = useSelector((state) => state.branchList);\n  const { branches } = branchList;\n\n  useEffect(() => {\n    dispatch(listBranches());\n  }, [dispatch]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      registerContributor(firstName, lastName, otherName, email, branch)\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-user-tie\"></i> REGISTER CONTRIBUTOR\n      </h1>\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"first-name\">\n          <Form.Label>First Name:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Surname\"\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"last-name\">\n          <Form.Label>Last Name:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Last Name\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"other-name\">\n          <Form.Label>Other Names:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Any Other Name\"\n            value={otherName}\n            onChange={(e) => setOtherName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"branch\">\n          <Form.Label>Branch:</Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={branch}\n            onChange={(e) => setBranch(e.target.value)}\n          >\n            <option>Choose Branch</option>\n            {branches.map((branch) => (\n              <option key={branch._id} value={branch._id}>\n                {branch.name}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email:</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter Valid Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"primary\" block>\n          REGISTER CONTRIBUTOR\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ContributorAuthScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/BranchEditScreen.js",["503","504","505"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { branchListDetails } from '../actions/branchActions';\nimport { BRANCH_CREATE_RESET } from '../constants/branchConstants';\n\n// TODO: REDIRECT\n// TODO: CLEAR INPUT USING RESET\nconst BranchEditScreen = ({ history, location, match }) => {\n  const [branchName, setBranchName] = useState('');\n  const [coopName, setCoopName] = useState('');\n  const [branchCode, setBranchCode] = useState('');\n  const [branchAddress, setBranchAddress] = useState('');\n  const [region, setRegion] = useState('');\n  const dispatch = useDispatch();\n\n  const branchDetails = useSelector((state) => state.branchDetails);\n  const { loading, error, branch } = branchDetails;\n\n  useEffect(() => {\n    if (!branch.name) {\n      dispatch(branchListDetails(match.params.id));\n    } else {\n      setBranchName(branch.name);\n      setCoopName(branch.coopName);\n      setBranchCode(branch.code);\n      setBranchAddress(branch.address);\n      setRegion(branch.region);\n    }\n  }, [dispatch, match, branch]);\n\n  const submitHandler = (e) => {\n    //     e.preventDefault();\n    //     dispatch(\n    //       editBranch(branchName, coopName, branchCode, branchAddress, region)\n    //     );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-city\"></i> EDIT Branch\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId=\"branchName\">\n            <Form.Label>Branch Name:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Branch Name\"\n              value={branchName}\n              onChange={(e) => setBranchName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"coop\">\n            <Form.Label>Cooperative Name:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Cooperative Name\"\n              value={coopName}\n              onChange={(e) => setCoopName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"branchAddress\">\n            <Form.Label>Branch Address:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Branch Address\"\n              value={branchAddress}\n              onChange={(e) => setBranchAddress(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"region\">\n            <Form.Label>Region:</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={region}\n              onChange={(e) => setRegion(e.target.value)}\n            >\n              <option>Choose Region</option>\n              <option value=\"Mid-West\">Mid-West</option>\n              <option value=\"North\">North</option>\n              <option value=\"South-South\">South-South</option>\n              <option value=\"South-West\">South-West</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"branchCode\">\n            <Form.Label>Branch Code:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Branch Code\"\n              value={branchCode}\n              onChange={(e) => setBranchCode(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Button type=\"submit\" variant=\"primary\" block>\n            Create Branch\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default BranchEditScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ProfileScreen.js",["506","507","508","509","510","511","512","513","514"],"import React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { Card, ListGroup, Table, Button, Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport { listAllInvestments } from \"../actions/investmentActions\";\nimport { updateMyPassword } from \"../actions/authActions\";\n\nconst ProfileScreen = () => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [newPasswordConfirm, setNewPasswordConfirm] = useState(\"\");\n\n  const investmentList = useSelector((state) => state.investmentList);\n  const { loading, error, allInvestments } = investmentList;\n\n  const numberComma = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const client = allInvestments?.filter(\n    (investment) =>\n      investment?.investmentOfficer?._id === userInfo.data.user?._id\n  );\n\n  useEffect(() => {\n    dispatch(listAllInvestments());\n  }, [dispatch]);\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(updateMyPassword(oldPassword, newPassword, newPasswordConfirm));\n  };\n\n  return (\n    <>\n      <h1>My Profile</h1>\n      <>\n        <Card>\n          <ListGroup>\n            <Card.Body>\n              <FormContainer>\n                <h4>Update Password</h4>\n                <Form onSubmit={submitHandler}>\n                  <Form.Group controlId=\"old-password\">\n                    <Form.Label>Old Password:</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      placeholder=\"Enter Old Password\"\n                      value={oldPassword}\n                      onChange={(e) => setOldPassword(e.target.value)}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"new-password\">\n                    <Form.Label>New Password:</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      placeholder=\"Enter New Password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"confirm-new-password\">\n                    <Form.Label>Confirm New Password:</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      placeholder=\"Enter New Password Again\"\n                      value={newPasswordConfirm}\n                      onChange={(e) => setNewPasswordConfirm(e.target.value)}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Button type=\"submit\" variant=\"primary\" block>\n                    Update My Password\n                  </Button>\n                </Form>\n              </FormContainer>\n            </Card.Body>\n          </ListGroup>\n        </Card>\n      </>\n    </>\n  );\n};\n\nexport default ProfileScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/TopUpVerifyScreen.js",["515","516","517","518"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, FormGroup, Card, ListGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport moment from \"moment\";\nimport { topUpListDetails, topUpConfirm } from \"../actions/topUpActions\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst TopUpVerifyScreen = ({ match }) => {\n  const [dateConfirm, setDateConfirm] = useState(\"\");\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [note, setNote] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const topUpDetails = useSelector((state) => state.topUpDetails);\n  const { loading, error, topup } = topUpDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(topUpListDetails(match.params.id));\n  }, [match, dispatch]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (isConfirmed === true && dateConfirm !== \"\") {\n      dispatch(\n        topUpConfirm(\n          topup._id,\n          isConfirmed,\n          dateConfirm,\n          userInfo.data.user._id,\n          note\n        )\n      );\n    } else {\n      window.alert(\"Not confirmed\");\n    }\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-check-double\"></i> Confirm TopUp\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Card>\n            <ListGroup>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Contributor Details</h2>\n                  <Form.Group controlId=\"branch\">\n                    <Form.Label>Branch:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.branch?.name}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Bara Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"select\"\n                      value={topup?.customer?.baraNumber}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"full-name\">\n                    <Form.Label>Contributor's Full Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Full Name\"\n                      value={topup?.customer?.fullName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"bank-name\">\n                    <Form.Label>Bank Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.bankName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-name\">\n                    <Form.Label>Account Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.accountName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.accountNumber}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"type\">\n                    <Form.Label>Contribution Type:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.type}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Confirmation</h2>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Official Bank:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup.officialBank}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"confirmed-amout\">\n                    <Form.Label>Amount to Confirm:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`N${topup?.topUpAmount\n                        ?.toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"is-confirmed\">\n                    <Form.Check\n                      type=\"checkbox\"\n                      label=\"Confirm?\"\n                      checked={isConfirmed}\n                      onChange={(e) => setIsConfirmed(e.target.checked)}\n                    ></Form.Check>\n                  </Form.Group>\n                  <Form.Group controlId=\"confirm-date\">\n                    <Form.Label>Confirmation Date:</Form.Label>\n                    <Form.Control\n                      type=\"date\"\n                      value={dateConfirm}\n                      onChange={(e) => setDateConfirm(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"confirm-note\">\n                    <Form.Label>Note:</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      placeholder=\"Optional\"\n                      value={note}\n                      rows={3}\n                      onChange={(e) => setNote(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"bank-payment\">\n                    <Form.Label>Confirmed By:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`${userInfo.data.user.firstName} ${\n                        userInfo.data.user.lastName\n                      } ${userInfo.data.user.otherName || \"\"}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n            </ListGroup>\n          </Card>\n\n          <Button type=\"submit\" variant=\"primary\" block>\n            Confirm\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default TopUpVerifyScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/TopUpReceiptScreen.js",["519","520","521"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Form, Button, FormGroup, Card, ListGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { topUpListDetails, receiptTopGenerate } from \"../actions/topUpActions\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst TopUpReceiptScreen = ({ match, history }) => {\n  const [isGenerated, setIsGenerated] = useState(false);\n  const [note, setNote] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const topUpDetails = useSelector((state) => state.topUpDetails);\n  const { loading, error, topup } = topUpDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(topUpListDetails(match.params.id));\n  }, [match, dispatch]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      receiptTopGenerate(\n        topup._id,\n        isGenerated,\n        userInfo.data.user._id,\n        moment().format(),\n        `${userInfo.data.user.firstName} ${userInfo.data.user.lastName} ${\n          userInfo.data.user.otherName || \"\"\n        }`,\n        note\n      )\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i class=\"fas fa-receipt\"></i> Generate Receipt\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Card>\n            <ListGroup>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Contributor Details</h2>\n                  <Form.Group controlId=\"branch\">\n                    <Form.Label>Branch:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.branch?.name}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Bara Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"select\"\n                      value={topup?.customer?.baraNumber}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"full-name\">\n                    <Form.Label>Contributor's Full Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Full Name\"\n                      value={topup?.customer?.fullName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"address\">\n                    <Form.Label>Contributor's Address:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Address\"\n                      value={topup?.customer?.address}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"receipt-amout\">\n                    <Form.Label>Amount to Generate Receipt:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`N${topup?.topUpAmount\n                        ?.toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"type\">\n                    <Form.Label>Contribution Type:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.type}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Receipt</h2>\n\n                  <Form.Group controlId=\"is-confirmed\">\n                    <Form.Check\n                      type=\"checkbox\"\n                      label=\"Generate Receipt?\"\n                      checked={isGenerated}\n                      onChange={(e) => setIsGenerated(e.target.checked)}\n                    ></Form.Check>\n                  </Form.Group>\n                  <Form.Group controlId=\"confirm-note\">\n                    <Form.Label>Note:</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      placeholder=\"Optional\"\n                      value={note}\n                      rows={3}\n                      onChange={(e) => setNote(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"bank-payment\">\n                    <Form.Label>Generated By:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`${userInfo.data.user.firstName} ${\n                        userInfo.data.user.lastName\n                      } ${userInfo.data.user.otherName || \"\"}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n            </ListGroup>\n          </Card>\n\n          <Button type=\"submit\" variant=\"primary\" block>\n            Generate Receipt\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default TopUpReceiptScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/LegalMouTopScreen.js",["522","523"],"import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Form, Button, FormGroup, Card, ListGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\n\nimport { topUpListDetails, receiptTopGenerate } from '../actions/topUpActions';\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst LegalMouTopScreen = ({ match }) => {\n  const [isGenerated, setIsGenerated] = useState(false);\n  const [note, setNote] = useState('');\n\n  const dispatch = useDispatch();\n\n  const topUpDetails = useSelector((state) => state.topUpDetails);\n  const { loading, error, topup } = topUpDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch(topUpListDetails(match.params.id));\n  }, [match, dispatch]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (topup.topUpVerified === false || topup.invoicePrepared === false) {\n      window.alert('You cannot perform this action now');\n    } else {\n      if (isGenerated === false) {\n        window.alert('Please generate mou');\n      } else {\n        dispatch();\n        //   mouGenerate(\n        //     investment._id,\n        //     isGenerated,\n        //     userInfo.data.user._id,\n        //     moment().format(),\n        //     note\n        //   )\n      }\n    }\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-balance-scale\"></i> Generate MOU\n      </h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Card>\n            <ListGroup>\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Client Details</h2>\n                  <Form.Group controlId=\"branch\">\n                    <Form.Label>Branch:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.branch?.name}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"account-number\">\n                    <Form.Label>Bara Account Number:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={topup?.customer?.baraNumber}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"full-name\">\n                    <Form.Label>Client Full Name:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Full Name\"\n                      value={topup?.customer?.fullName}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"date-birth\">\n                    <Form.Label>Date of Birth:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Date of Birth\"\n                      value={moment(topup?.customer?.dob).format(\n                        'Do MMMM YYYY'\n                      )}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"address\">\n                    <Form.Label>Address:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"address\"\n                      value={topup?.customer?.address}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"date\">\n                    <Form.Label>Date of Confirmation:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"date\"\n                      value={moment(topup.dateTopUpVerify).format(\n                        'Do MMMM YYYY'\n                      )}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n\n                  <Form.Group controlId=\"confirmed-amout\">\n                    <Form.Label>Amount:</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"Amount\"\n                      value={topup?.investment?.totalAmountInvested}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"gender\">\n                    <Form.Label>Gender:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Gender\"\n                      value={topup?.customer?.gender}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"plan\">\n                    <Form.Label>Investment Plan:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"plan\"\n                      value={`${topup?.investment?.investmentDuration} Months`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n\n              <Card.Body>\n                <ListGroup.Item>\n                  <h2>Generate MOU</h2>\n                  <Form.Group controlId=\"is-confirmed\">\n                    <Form.Check\n                      type=\"checkbox\"\n                      label=\"Generate MOU?\"\n                      checked={isGenerated}\n                      onChange={(e) => setIsGenerated(e.target.checked)}\n                    ></Form.Check>\n                  </Form.Group>\n                  <Form.Group controlId=\"Note-note\">\n                    <Form.Label>Note:</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      placeholder=\"Optional\"\n                      value={note}\n                      rows={3}\n                      onChange={(e) => setNote(e.target.value)}\n                    ></Form.Control>\n                  </Form.Group>\n                  <Form.Group controlId=\"generated-by\">\n                    <Form.Label>Generated By:</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={`${userInfo.data.user.firstName} ${\n                        userInfo.data.user.lastName\n                      } ${userInfo.data.user.otherName || ''}`}\n                      disabled\n                    ></Form.Control>\n                  </Form.Group>\n                </ListGroup.Item>\n              </Card.Body>\n            </ListGroup>\n          </Card>\n\n          <Button type=\"submit\" variant=\"primary\" block>\n            <i className=\"fas fa-balance-scale-right\"></i> Generate MOU\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default LegalMouTopScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/ContributionNewScreen.js",["524","525","526","527"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Form, Button, FormGroup, Card, ListGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport { contributorListDetails } from \"../actions/contributorActions\";\nimport { listAllStaff } from \"../actions/staffActions\";\nimport { createInvestment } from \"../actions/investmentActions\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { INVESTMENT_CREATE_RESET } from \"../constants/investmentConstants\";\n\n// import CONTRIBUTOR_DETAILS_RESET from \"../constants/contributorConstants\";\n\n// TODO: GET BRANCH FROM BRANCH MODEL AND LOOP IN BRANCH\nconst ContributionNewScreen = ({ match, history }) => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const staffList = useSelector((state) => state.staffList);\n  const { allStaff } = staffList;\n\n  const contributorDetails = useSelector((state) => state.contributorDetails);\n  const {\n    contributor,\n    loading: contributeLoading,\n    error: contributeError,\n  } = contributorDetails;\n\n  const [dateConfirm, setDateConfirm] = useState(\"\");\n  const [investmentDuration, setInvestmentDuration] = useState(\"\");\n  const [investmentAmount, setInvestmentAmount] = useState(\"\");\n  const [baraNumber, setBaraNumber] = useState(\"\");\n  const [officialBank, setOfficialBank] = useState(\"\");\n  const [note, setNote] = useState(\"\");\n\n  const investmentCreate = useSelector((state) => state.investmentCreate);\n  const { loading, error, investment, success } = investmentCreate;\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    dispatch(contributorListDetails(match.params.id));\n    dispatch(listAllStaff());\n    if (success) {\n      dispatch({ type: INVESTMENT_CREATE_RESET });\n      window.alert(`${contributor.fullName} Created Successfully`);\n      // dispatch({ type: CONTRIBUTOR_DETAILS_RESET });\n      history.push(`/contribution/new-contributor`);\n    }\n  }, [dispatch, match, history, investment, contributor.fullName, success]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    const paymentDates = [];\n    for (let i = 1; i <= investmentDuration; i += 1) {\n      paymentDates.push(\n        moment(dateConfirm).add(i, \"months\").format(\"YYYY-MM-DD\")\n      );\n    }\n\n    // const implementDate = moment(\"2021-01-01\").format(\"YYYY-MM-DD\");\n    // if (moment(dateConfirm).format(\"YYYY-MM-DD\") >= implementDate) {\n    //   if (investmentDuration === 6) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 10;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 5;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 2;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 1;\n    //     }\n    //   } else if (investmentDuration === 12) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 12;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 7;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 4;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 2;\n    //     }\n    //   } else if (investmentDuration === 24) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 15;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 10;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 5;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 3;\n    //     }\n    //   }\n    // } else {\n    //   if (investmentDuration === 6) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 15;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 10;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 5;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 3;\n    //     }\n    //   } else if (investmentDuration === 12) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 17;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 12;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 7;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 5;\n    //     }\n    //   } else if (investmentDuration === 24) {\n    //     if (investmentAmount <= 5000000) {\n    //       percent = 20;\n    //     }\n    //     if (investmentAmount >= 5000001 && investmentAmount <= 50000000) {\n    //       percent = 15;\n    //     }\n    //     if (investmentAmount >= 50000001 && investmentAmount <= 100000000) {\n    //       percent = 10;\n    //     }\n    //     if (investmentAmount >= 100000001) {\n    //       percent = 5;\n    //     }\n    //   }\n    // }\n\n    // const data = new FormData();\n    // data.append(\"customer\", contributor._id);\n    // data.append(\"dateInvestVerify\", dateConfirm);\n    // data.append(\"investmentAmount\", investmentAmount);\n    // data.append(\"investmentDuration\", investmentDuration);\n    // data.append(\"paymentDates\", paymentDates);\n    // data.append(\"paymentProof\", proofPayment);\n    // data.append(\"createdBy\", userInfo.data.user._id);\n    dispatch(\n      createInvestment(\n        contributor._id,\n        dateConfirm,\n        officialBank,\n        note,\n        investmentAmount,\n        investmentDuration,\n        paymentDates,\n        userInfo.data.user._id\n      )\n    );\n  };\n  return (\n    <FormContainer>\n      <h1>\n        <i className=\"fas fa-credit-card\"></i> NEW CONTRIBUTION\n      </h1>\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n\n      <Form onSubmit={submitHandler}>\n        <Card>\n          <ListGroup>\n            <Card.Body>\n              <ListGroup.Item>\n                <h2>Contributor Details</h2>\n                <Form.Group controlId=\"account-number\">\n                  <Form.Label>Bara Account Number:</Form.Label>\n                  <Form.Control\n                    type=\"select\"\n                    value={baraNumber}\n                    onChange={(e) => setBaraNumber(e.target.value)}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"branch\">\n                  <Form.Label>Branch:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={contributor?.branch?.name}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"full-name\">\n                  <Form.Label>Full Name:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                    value={contributor.fullName}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"bank-name\">\n                  <Form.Label>Bank Name:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={contributor.bankName}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"account-name\">\n                  <Form.Label>Account Name:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Account Name\"\n                    value={contributor.accountName}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"account-number\">\n                  <Form.Label>Enter Account Number:</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Enter correct Account Number\"\n                    value={contributor.accountNumber}\n                    disabled\n                  ></Form.Control>\n                </Form.Group>\n              </ListGroup.Item>\n            </Card.Body>\n\n            <Card.Body>\n              <ListGroup.Item>\n                <h2>New Contribution</h2>\n                <Form.Group controlId=\"contribution-amout\">\n                  <Form.Label>Contribution Amount:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Amount Contributed\"\n                    value={investmentAmount}\n                    onChange={(e) => setInvestmentAmount(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"contribution-duration\">\n                  <Form.Label>Contribution Duration:</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={investmentDuration}\n                    onChange={(e) => setInvestmentDuration(e.target.value)}\n                  >\n                    <option>Select Contribution Duration</option>\n                    <option value=\"6\">6 Months</option>\n                    <option value=\"12\">12 Months</option>\n                    <option value=\"24\">24 Months</option>\n                  </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"bank-name\">\n                  <Form.Label>Bank Name:</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    value={officialBank}\n                    onChange={(e) => setOfficialBank(e.target.value)}\n                  >\n                    <option value=\"\">Select Bank</option>\n                    <option value=\"Fidelity Bank Plc\">Fidelity Bank Plc</option>\n                    <option value=\"Keystone Bank Limited\">\n                      Keystone Bank Limited\n                    </option>\n                    <option value=\"Polaris Bank Limited\">\n                      Polaris Bank Limited.\n                    </option>\n                    <option value=\"Sterling Bank Plc\">Sterling Bank Plc</option>\n                    <option value=\"SunTrust Bank Nigeria Limited\">\n                      SunTrust Bank Nigeria Limited\n                    </option>\n                    <option value=\"United Bank for Africa Plc\">\n                      United Bank for Africa Plc\n                    </option>\n                    <option value=\"Unity Bank Plc\">Unity Bank Plc</option>\n                    <option value=\"Wema Bank Plc\">Wema Bank Plc</option>\n                  </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"confirm-date\">\n                  <Form.Label>Confirmation Date:</Form.Label>\n                  <Form.Control\n                    type=\"date\"\n                    value={dateConfirm}\n                    onChange={(e) => setDateConfirm(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"confirm-note\">\n                  <Form.Label>Note:</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    placeholder=\"Required\"\n                    value={note}\n                    rows={3}\n                    onChange={(e) => setNote(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"created-by\">\n                  <Form.Label>Created By:</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    disabled\n                    value={`${userInfo.data.user.firstName} ${\n                      userInfo.data.user.lastName\n                    } ${userInfo.data.user.otherName || \"\"}`}\n                  ></Form.Control>\n                </Form.Group>\n              </ListGroup.Item>\n            </Card.Body>\n          </ListGroup>\n        </Card>\n\n        <Button type=\"submit\" variant=\"primary\" block>\n          Create Contribution\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ContributionNewScreen;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/BMSummaryScreen.js",[],"/Users/caleb/Desktop/new-account/frontend/src/components/Header.js",["528","529"],"import React from \"react\";\nimport moment from \"moment\";\nimport { Route } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { logout } from \"../actions/authActions\";\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const logoutHandler = () => {\n    dispatch(logout());\n  };\n  return (\n    // {userInfo && fullName = `${userInfo.data.user.firstName} ${userInfo.data.user.lastName}`}\n    <header>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n        <Container>\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>\n              <i className=\"fas fa-book\"></i> Bara Books\n            </Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ml-auto\">\n              {userInfo && userInfo.data.user.role !== \"user\" ? (\n                <LinkContainer to=\"/\">\n                  <Nav.Link>Home</Nav.Link>\n                </LinkContainer>\n              ) : null}\n\n              {userInfo &&\n              (userInfo.data.user.role === \"super-admin\" ||\n                userInfo.data.user.role === \"hr\") ? (\n                <NavDropdown title=\"branch\" id=\"basic-nav-dropdown\">\n                  <LinkContainer to=\"/branches\">\n                    <NavDropdown.Item>All Branches</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to=\"/create-branch\">\n                    <NavDropdown.Item>Create Branch</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              ) : null}\n              {userInfo &&\n              (userInfo.data.user.role === \"super-admin\" ||\n                userInfo.data.user.role === \"hr\") ? (\n                <NavDropdown title=\"staff\" id=\"basic-nav-dropdown\">\n                  <LinkContainer to=\"/register-staff\">\n                    <NavDropdown.Item>Create New Staff</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to=\"/all-staff\">\n                    <NavDropdown.Item>All Staff</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              ) : null}\n              {userInfo &&\n              (userInfo.data.user.role === \"super-admin\" ||\n                userInfo.data.user.role === \"business-development\" ||\n                userInfo.data.user.role === \"accounts\") ? (\n                <NavDropdown title=\"Contributions\" id=\"basic-nav-dropdown\">\n                  <LinkContainer to=\"/contribution/new-contributor\">\n                    <NavDropdown.Item>Create New Contributor</NavDropdown.Item>\n                  </LinkContainer>\n\n                  <LinkContainer to=\"/all-contributors\">\n                    <NavDropdown.Item>All Contributors</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              ) : null}\n              {userInfo &&\n              (userInfo.data.user.role === \"super-admin\" ||\n                userInfo.data.user.role === \"legal\") ? (\n                <NavDropdown title=\"Legal\" id=\"basic-nav-dropdown\">\n                  <LinkContainer to=\"/contribution/legal\">\n                    <NavDropdown.Item>Generate MOU</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              ) : null}\n              {userInfo &&\n              (userInfo.data.user.role === \"super-admin\" ||\n                (userInfo && userInfo.data.user.role === \"lead-accounts\")) ? (\n                <NavDropdown title=\"Accounts\" id=\"basic-nav-dropdown\">\n                  <LinkContainer to=\"/investment-list\">\n                    <NavDropdown.Item>Generate ROI</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to=\"/contribution/receipt\">\n                    <NavDropdown.Item>Receipts</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              ) : null}\n\n              {userInfo ? (\n                <NavDropdown\n                  title={userInfo.data.user.firstName}\n                  id=\"basic-nav-dropdown\"\n                >\n                  <LinkContainer to=\"/profile\">\n                    <NavDropdown.Item>Profile</NavDropdown.Item>\n                  </LinkContainer>\n                  <NavDropdown.Divider />\n                  <NavDropdown.Item onClick={logoutHandler}>\n                    <i className=\"fas fa-sign-out-alt\"></i> Logout\n                  </NavDropdown.Item>\n                </NavDropdown>\n              ) : (\n                <LinkContainer to=\"/login\">\n                  <Nav.Link>Sign In</Nav.Link>\n                </LinkContainer>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","/Users/caleb/Desktop/new-account/frontend/src/screens/BranchListScreen.js",[],"/Users/caleb/Desktop/new-account/frontend/src/components/Message.js",[],"/Users/caleb/Desktop/new-account/frontend/src/components/Loader.js",[],"/Users/caleb/Desktop/new-account/frontend/src/components/FormContainer.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/staffConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/investmentConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/contributorConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/branchConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/authConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/constants/topUpConstants.js",[],"/Users/caleb/Desktop/new-account/frontend/src/actions/branchActions.js",[],"/Users/caleb/Desktop/new-account/frontend/src/actions/authActions.js",[],"/Users/caleb/Desktop/new-account/frontend/src/actions/staffActions.js",[],"/Users/caleb/Desktop/new-account/frontend/src/actions/contributorActions.js",[],["530","531"],"/Users/caleb/Desktop/new-account/frontend/src/actions/topUpActions.js",[],"/Users/caleb/Desktop/new-account/frontend/src/actions/investmentActions.js",["532","533","534"],"import axios from \"axios\";\nimport {\n  INVESTMENT_CONFIRM_FAIL,\n  INVESTMENT_CONFIRM_REQUEST,\n  INVESTMENT_CONFIRM_SUCCESS,\n  INVESTMENT_CREATE_FAIL,\n  INVESTMENT_CREATE_REQUEST,\n  INVESTMENT_CREATE_SUCCESS,\n  INVESTMENT_DETAILS_FAIL,\n  INVESTMENT_DETAILS_REQUEST,\n  INVESTMENT_DETAILS_SUCCESS,\n  INVESTMENT_LIST_FAIL,\n  INVESTMENT_LIST_REQUEST,\n  INVESTMENT_LIST_SUCCESS,\n  INVESTMENT_UPDATE_FAIL,\n  INVESTMENT_UPDATE_REQUEST,\n  INVESTMENT_UPDATE_SUCCESS,\n  MOU_CREATE_FAIL,\n  MOU_CREATE_REQUEST,\n  MOU_CREATE_SUCCESS,\n  RECEIPT_CREATE_FAIL,\n  RECEIPT_CREATE_REQUEST,\n  RECEIPT_CREATE_SUCCESS,\n} from \"../constants/investmentConstants\";\n\nimport { logout } from \"./authActions\";\n\n// Create new investment\n\nexport const createInvestment = (\n  customer,\n  dateInvestVerify,\n  officialBank,\n  note,\n  investmentAmount,\n  investmentDuration,\n  paymentDates,\n  createdBy\n) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: INVESTMENT_CREATE_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const { data } = await axios.post(\n      `/api/v1/investments`,\n      {\n        customer,\n        dateInvestVerify,\n        officialBank,\n        note,\n        investmentAmount,\n        investmentDuration,\n        paymentDates,\n        createdBy,\n      },\n      config\n    );\n\n    dispatch({\n      type: INVESTMENT_CREATE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: INVESTMENT_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// List All Investments\nexport const listAllInvestments = () => async (dispatch, getState) => {\n  try {\n    dispatch({ type: INVESTMENT_LIST_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/v1/investments`, config);\n    // `/api/v1/investments?paymentDates=${date}`\n\n    dispatch({\n      type: INVESTMENT_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: INVESTMENT_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// List all investments for due dates\nexport const listAllInvestmentsDue = (\n  date = \"\",\n  roi = \"investmentAmount\"\n) => async (dispatch) => {\n  try {\n    dispatch({ type: INVESTMENT_LIST_REQUEST });\n\n    const { data } = await axios.get(\n      `/api/v1/investments?paymentDates=${date}&sort=${roi}`\n    );\n    // `/api/v1/investments?paymentDates=${date}`\n\n    dispatch({\n      type: INVESTMENT_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: INVESTMENT_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// List all investments Summary\nexport const listAllInvestmentsSummary = (\n  startDate = \"\",\n  endDate = \"\"\n) => async (dispatch) => {\n  try {\n    dispatch({ type: INVESTMENT_LIST_REQUEST });\n\n    const { data } = await axios.get(\n      `/api/v1/investments?paymentDates[gte]=${startDate}&paymentDates=${endDate}`\n    );\n    // `/api/v1/investments?paymentDates=${date}`\n\n    dispatch({\n      type: INVESTMENT_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: INVESTMENT_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// List an investment details\nexport const investmentListDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: INVESTMENT_DETAILS_REQUEST });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/v1/investments/${id}`, config);\n\n    dispatch({\n      type: INVESTMENT_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"jwt expired\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: INVESTMENT_DETAILS_FAIL,\n      payload: message,\n    });\n  }\n};\n\n// Confirm investment\nexport const investmentConfirm = (\n  investId,\n  isConfirmed,\n  dateConfirmed,\n  userConfirmed,\n  paymentDates,\n  note\n) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: INVESTMENT_CONFIRM_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.patch(\n      `/api/v1/investments/confirm-payment/${investId}`,\n      // `/api/v1/investments/${investId}`,\n      {\n        investmentVerified: isConfirmed,\n        dateInvestVerify: dateConfirmed,\n        confirmedBy: userConfirmed,\n        paymentDates: paymentDates,\n        note: note,\n      },\n      config\n    );\n\n    dispatch({\n      type: INVESTMENT_CONFIRM_SUCCESS,\n      payload: data,\n    });\n    // dispatch({ type: INVESTMENT_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    // if (message === 'Not authorized, token failed') {\n    //   dispatch(logout())\n    // }\n    dispatch({\n      type: INVESTMENT_CONFIRM_FAIL,\n      payload: message,\n    });\n  }\n};\n\n// Generate receipt for investment\n\nexport const receiptGenerate = (\n  investId,\n  invoicePrepared,\n  invoicePreparedBy,\n  dateInvoicePrepared,\n  issuer,\n  receiptGenerateNote\n) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: RECEIPT_CREATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.patch(\n      `/api/v1/investments/invoice/${investId}`,\n      {\n        invoicePrepared,\n        invoicePreparedBy,\n        dateInvoicePrepared,\n        issuer,\n        receiptGenerateNote,\n      },\n      config\n    );\n    dispatch({ type: RECEIPT_CREATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: RECEIPT_CREATE_FAIL,\n      payload: message,\n    });\n  }\n};\n\n// Generate MOU for investment\nexport const mouGenerate = (\n  investId,\n  mouPrepared,\n  mouPreparedBy,\n  dateMouPrepared,\n  mouGenerateNote\n) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MOU_CREATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.patch(\n      `/api/v1/investments/mou/${investId}`,\n      {\n        mouPrepared,\n        mouPreparedBy,\n        dateMouPrepared,\n        mouGenerateNote,\n      },\n      config\n    );\n    dispatch({ type: MOU_CREATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: MOU_CREATE_FAIL,\n      payload: message,\n    });\n  }\n};\n","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/index.js",[],["535","536"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/store.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/App.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reportWebVitals.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/authReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/branchReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/staffReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/contributorReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/topUpReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/reducers/investmentReducers.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffRegisterScreen.js",["537"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffListScreen.js",["538"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LoginScreen.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/StaffDetailScreen.js",["539","540","541","542","543","544"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/HomeScreen.js",["545","546","547"],"import React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Card, ListGroup, Table, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { listAllInvestments } from \"../actions/investmentActions\";\nimport { listAllContributors } from \"../actions/contributorActions\";\nimport { listAllTopUps } from \"../actions/topUpActions\";\nimport { INVESTMENT_CONFIRM_RESET } from \"../constants/investmentConstants\";\n\nconst HomeScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const contributorList = useSelector((state) => state.contributorList);\n  const {\n    loading: contributorLoading,\n    error: contributorError,\n    allContributors,\n  } = contributorList;\n  const topUpList = useSelector((state) => state.topUpList);\n  const { loading: topUpLoading, error: topUpError, allTopUps } = topUpList;\n\n  const investmentList = useSelector((state) => state.investmentList);\n  const { loading, error, allInvestments } = investmentList;\n\n  const numberComma = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const unverifiedTopUp = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter((unverifiedTopUp) => unverifiedTopUp.topUpVerified === false);\n\n  const noTopUpReceipt = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noTopReceipt) =>\n        noTopReceipt.topUpVerified === true &&\n        noTopReceipt.invoicePrepared === false\n    );\n\n  const noTopUpMou = allTopUps\n    ?.filter(\n      (topUp) =>\n        topUp?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noTopReceipt) =>\n        noTopReceipt.topUpVerified === true &&\n        noTopReceipt.invoicePrepared === true &&\n        noTopReceipt.mouPrepared === false\n    );\n\n  const unverifiedInvestment = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (unverifiedInvestment) =>\n        unverifiedInvestment.investmentVerified === false\n    );\n  const receipt = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noReceipt) =>\n        noReceipt.investmentVerified === true &&\n        noReceipt.invoicePrepared === false\n    );\n\n  const mou = allInvestments\n    ?.filter(\n      (investment) =>\n        investment?.customer?.branch?.name === userInfo.data.user?.branch?.name\n    )\n    ?.filter(\n      (noMou) =>\n        noMou.investmentVerified === true &&\n        noMou.invoicePrepared === true &&\n        noMou.mouPrepared === false\n    );\n\n  useEffect(() => {\n    if (userInfo !== null) {\n      dispatch({ type: INVESTMENT_CONFIRM_RESET });\n      dispatch(listAllInvestments());\n      dispatch(listAllTopUps());\n      dispatch(listAllContributors());\n    } else {\n      history.push(\"/login\");\n    }\n  }, [dispatch, userInfo, history]);\n\n  return (\n    <>\n      {userInfo !== null ? (\n        <>\n          <h1>Welcome {userInfo.data.user.lastName}</h1>\n          <>\n            <Card>\n              <ListGroup>\n                {/*TO CHECK THAT ROLE IS ASSIGNED TO ONLY SPECIAL DUTIES */}\n                {(userInfo.data.user.role === \"special-duties\" ||\n                  userInfo.data.user.role === \"super-admin\") && (\n                  <>\n                    <Card.Body>\n                      <h2>UnConfirmed Contributions</h2>\n                      <ListGroup.Item>\n                        {loading ? (\n                          <Loader />\n                        ) : error ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of Application{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Investment Officer </th>\n                                <th>Bank of Payment </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {unverifiedInvestment.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">\n                                    No Unconfirmed Contribution\n                                  </td>\n                                </tr>\n                              ) : (\n                                unverifiedInvestment?.map((invest) => (\n                                  <tr key={invest._id}>\n                                    <td></td>\n                                    <td>{invest.customer?.fullName}</td>\n                                    <td>\n                                      {moment(invest.createdAt).format(\n                                        \"Do MMMM YYYY\"\n                                      )}\n                                    </td>\n                                    <td>\n                                      N{numberComma(invest.investmentAmount)}\n                                    </td>\n                                    <td>{`${\n                                      invest.investmentOfficer?.firstName\n                                    } ${invest.investmentOfficer?.lastName} ${\n                                      invest.investmentOfficer?.otherName || \"\"\n                                    }`}</td>\n                                    <td>{invest.officialBank}</td>\n                                    <td>{invest.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role ===\n                                        \"special-duties\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`/contribution/confirm-contribution/${invest?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    <Card.Body>\n                      <h2>UnConfirmed TopUps</h2>\n                      <ListGroup.Item>\n                        {topUpLoading ? (\n                          <Loader />\n                        ) : topUpError ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of TopUp{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Bank of Payment </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {unverifiedTopUp.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">No Unconfirmed Top-up</td>\n                                </tr>\n                              ) : (\n                                unverifiedTopUp?.map((topUp) => (\n                                  <tr key={topUp._id}>\n                                    <td></td>\n                                    <td>{topUp.customer?.fullName}</td>\n                                    <td>\n                                      {moment(topUp.createdAt).format(\n                                        \"Do MMMM YYYY\"\n                                      )}\n                                    </td>\n                                    <td>N{numberComma(topUp.topUpAmount)}</td>\n                                    <td>{topUp.officialBank}</td>\n                                    <td>{topUp.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role ===\n                                        \"special-duties\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`topup/verify-contribution/${topUp?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    {/*RECEIPT CHECK*/}\n\n                    {/*RECEIPT CHECK*/}\n                  </>\n                )}\n\n                {(userInfo.data.user.role === \"accounts\" ||\n                  userInfo.data.user.role === \"super-admin\") && (\n                  <>\n                    <Card.Body>\n                      <h2>GENERATE RECEIPTS (CONTRIBUTION)</h2>\n                      <ListGroup.Item>\n                        {loading ? (\n                          <Loader />\n                        ) : error ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of Investment{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Investment Duration </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {receipt.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">No receipt to Generate</td>\n                                </tr>\n                              ) : (\n                                receipt?.map((newReceipt) => (\n                                  <tr key={newReceipt._id}>\n                                    <td></td>\n                                    <td>{newReceipt.customer?.fullName}</td>\n                                    <td>\n                                      {moment(\n                                        newReceipt.dateInvestVerify\n                                      ).format(\"Do MMMM YYYY\")}\n                                    </td>\n                                    <td>\n                                      N\n                                      {numberComma(newReceipt.investmentAmount)}\n                                    </td>\n                                    <td>{`${newReceipt.investmentDuration} months`}</td>\n                                    <td>{newReceipt.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role === \"accounts\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`/contribution/receipt/${newReceipt?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n                    <Card.Body>\n                      <h2>GENERATE RECEIPTS (TOPUP)</h2>\n                      <ListGroup.Item>\n                        {loading ? (\n                          <Loader />\n                        ) : error ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of TopUp{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Investment Duration </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {receipt.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">No receipt to Generate</td>\n                                </tr>\n                              ) : (\n                                noTopUpReceipt?.map((newReceipt) => (\n                                  <tr key={newReceipt._id}>\n                                    <td></td>\n                                    <td>{newReceipt.customer?.fullName}</td>\n                                    <td>\n                                      {moment(\n                                        newReceipt.dateTopUpVerify\n                                      ).format(\"Do MMMM YYYY\")}\n                                    </td>\n                                    <td>\n                                      N{numberComma(newReceipt.topUpAmount)}\n                                    </td>\n                                    <td>{`${newReceipt.investmentDuration} months`}</td>\n                                    <td>{newReceipt.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role === \"accounts\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`/topup/receipt/${newReceipt?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n                  </>\n                )}\n\n                {(userInfo.data.user.role === \"legal\" ||\n                  userInfo.data.user.role === \"super-admin\") && (\n                  <>\n                    <Card.Body>\n                      <h2>GENERATE MOU (INVESTMENT)</h2>\n                      <ListGroup.Item>\n                        {loading ? (\n                          <Loader />\n                        ) : error ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of Investment{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Investment Duration </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {mou.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">No MOU to Generate</td>\n                                </tr>\n                              ) : (\n                                mou?.map((newMou) => (\n                                  <tr key={newMou._id}>\n                                    <td></td>\n                                    <td>{newMou.customer?.fullName}</td>\n                                    <td>\n                                      {moment(newMou.dateInvestVerify).format(\n                                        \"Do MMMM YYYY\"\n                                      )}\n                                    </td>\n                                    <td>\n                                      N{numberComma(newMou.totalAmountInvested)}\n                                    </td>\n                                    <td>{`${newMou.investmentDuration} months`}</td>\n                                    <td>{newMou.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role === \"legal\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`/contribution/legal/${newMou?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n\n                    <Card.Body>\n                      <h2>GENERATE MOU (TOPUP)</h2>\n                      <ListGroup.Item>\n                        {loading ? (\n                          <Loader />\n                        ) : error ? (\n                          <Message variant=\"danger\">{error}</Message>\n                        ) : (\n                          <Table\n                            striped\n                            bordered\n                            hover\n                            responsive\n                            className=\"table-sm\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>#</th>\n                                <th>\n                                  Full Name{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>\n                                  Date of Investment{\" \"}\n                                  <Button className=\"btn btn-light\">\n                                    <i className=\"fas fa-sort\"></i>\n                                  </Button>\n                                </th>\n                                <th>Amount</th>\n                                <th>Investment Duration </th>\n                                <th>Type </th>\n                                <th>More</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {noTopUpMou?.length === 0 ? (\n                                <tr>\n                                  <td></td>\n                                  <td colSpan=\"7\">No MOU to Generate</td>\n                                </tr>\n                              ) : (\n                                noTopUpMou?.map((newMou) => (\n                                  <tr key={newMou._id}>\n                                    <td></td>\n                                    <td>{newMou.customer?.fullName}</td>\n                                    <td>\n                                      {moment(newMou.dateTopUpVerify).format(\n                                        \"Do MMMM YYYY\"\n                                      )}\n                                    </td>\n                                    <td>N{numberComma(newMou.topUpAmount)}</td>\n                                    <td>{`${newMou.investment.investmentDuration} months`}</td>\n                                    <td>{newMou.type}</td>\n                                    <td>\n                                      {userInfo.data.user.role === \"legal\" ||\n                                      userInfo.data.user.role ===\n                                        \"super-admin\" ? (\n                                        <Link\n                                          to={`/topup/legal/${newMou?._id}`}\n                                        >\n                                          <i className=\"fas fa-info-circle\"></i>\n                                        </Link>\n                                      ) : (\n                                        \"Not Authorised\"\n                                      )}\n                                    </td>\n                                  </tr>\n                                ))\n                              )}\n                            </tbody>\n                          </Table>\n                        )}\n                      </ListGroup.Item>\n                    </Card.Body>\n                  </>\n                )}\n                {/* THIS IS COMMENTED OUT\n            {(userInfo.data.user.role === 'investment' ||\n              userInfo.data.user.role === 'super-admin') && (\n              <Card.Body>\n                <h2>Contributors with no Contributions</h2>\n                <ListGroup.Item>\n                  {loading ? (\n                    <Loader />\n                  ) : error ? (\n                    <Message variant=\"danger\">{error}</Message>\n                  ) : (\n                    <Table\n                      striped\n                      bordered\n                      hover\n                      responsive\n                      className=\"table-sm\"\n                    >\n                      <thead>\n                        <tr>\n                          <th>#</th>\n                          <th>\n                            Full Name{' '}\n                            <Button className=\"btn btn-light\">\n                              <i className=\"fas fa-sort\"></i>\n                            </Button>\n                          </th>\n                          <th>\n                            Date of Application{' '}\n                            <Button className=\"btn btn-light\">\n                              <i className=\"fas fa-sort\"></i>\n                            </Button>\n                          </th>\n                          <th>Amount</th>\n                          <th>Investment Officer </th>\n                          <th>Type </th>\n                          <th>More</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {allContributors\n                          .?filter(\n                            (contributor) =>\n                              contributor?.branch?.name ===\n                              userInfo.data.user?.branch?.name\n                          )\n                          ?.map((customer) => (\n                            <tr key={customer._id}>\n                              <td></td>\n                              <td>{customer.customer?.fullName}</td>\n                              <td>\n                                {moment(customer.createdAt).format(\n                                  'Do MMMM YYYY'\n                                )}\n                              </td>\n                              <td></td>\n                              <td>{`${customer.investmentOfficer?.firstName} ${\n                                customer.investmentOfficer?.lastName\n                              } ${\n                                customer.investmentOfficer?.otherName || ''\n                              }`}</td>\n                              <td>{customer.type}</td>\n                              <td>\n                                {userInfo.data.user.role === 'investment' ||\n                                userInfo.data.user.role === 'super-admin' ? (\n                                  <Link\n                                    to={`/contribution/confirm-contribution/${customer?._id}`}\n                                  >\n                                    <i className=\"fas fa-info-circle\"></i>\n                                  </Link>\n                                ) : (\n                                  'Not Authorised'\n                                )}\n                              </td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  )}\n                </ListGroup.Item>\n              </Card.Body>\n            )}\n          */}\n              </ListGroup>\n            </Card>\n          </>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport default HomeScreen;\n","/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Footer.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/CreateBranchScreen.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorRegisterScreen.js",["548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorListScreen.js",["573"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributionConfirmScreen.js",["574","575","576","577","578"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LegalMOUScreen.js",["579","580"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BranchListScreen.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Header.js",["581","582"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/CreateTopUpScreen.js",["583","584","585","586","587"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributionNewScreen.js",["588","589","590","591"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/DuePaymentsScreen.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/AllTopUpsScreen.js",["592","593","594","595","596"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ReceiptGeneratorScreen.js",["597","598"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorDetailsScreen.js",["599","600","601","602","603","604","605","606"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BranchEditScreen.js",["607","608","609"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/TopUpReceiptScreen.js",["610","611","612"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ProfileScreen.js",["613","614","615","616","617","618","619","620","621"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/BMSummaryScreen.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/LegalMouTopScreen.js",["622","623"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/TopUpVerifyScreen.js",["624","625","626","627"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/screens/ContributorAuthScreen.js",["628"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/contributorConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/topUpConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/authConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/branchConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/FormContainer.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/staffConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Loader.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/constants/investmentConstants.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/contributorActions.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/authActions.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/components/Message.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/staffActions.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/investmentActions.js",["629","630","631"],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/topUpActions.js",[],"/Users/caleb/Dev/projects/bara/baraminicoop/frontend/src/actions/branchActions.js",[],{"ruleId":"632","replacedBy":"633"},{"ruleId":"634","replacedBy":"635"},{"ruleId":"636","severity":1,"message":"637","line":2,"column":10,"nodeType":"638","messageId":"639","endLine":2,"endColumn":23},{"ruleId":"636","severity":1,"message":"640","line":21,"column":19,"nodeType":"638","messageId":"639","endLine":21,"endColumn":29},{"ruleId":"636","severity":1,"message":"641","line":1,"column":17,"nodeType":"638","messageId":"639","endLine":1,"endColumn":25},{"ruleId":"636","severity":1,"message":"637","line":4,"column":10,"nodeType":"638","messageId":"639","endLine":4,"endColumn":23},{"ruleId":"636","severity":1,"message":"642","line":5,"column":20,"nodeType":"638","messageId":"639","endLine":5,"endColumn":29},{"ruleId":"636","severity":1,"message":"643","line":5,"column":31,"nodeType":"638","messageId":"639","endLine":5,"endColumn":35},{"ruleId":"636","severity":1,"message":"644","line":5,"column":37,"nodeType":"638","messageId":"639","endLine":5,"endColumn":42},{"ruleId":"636","severity":1,"message":"645","line":5,"column":44,"nodeType":"638","messageId":"639","endLine":5,"endColumn":50},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"647","line":9,"column":10,"nodeType":"638","messageId":"639","endLine":9,"endColumn":28},{"ruleId":"636","severity":1,"message":"648","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":32},{"ruleId":"636","severity":1,"message":"649","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":28},{"ruleId":"636","severity":1,"message":"650","line":30,"column":5,"nodeType":"638","messageId":"639","endLine":30,"endColumn":10},{"ruleId":"636","severity":1,"message":"651","line":11,"column":3,"nodeType":"638","messageId":"639","endLine":11,"endColumn":28},{"ruleId":"636","severity":1,"message":"652","line":21,"column":17,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"653","line":22,"column":19,"nodeType":"638","messageId":"639","endLine":22,"endColumn":29},{"ruleId":"636","severity":1,"message":"654","line":23,"column":19,"nodeType":"638","messageId":"639","endLine":23,"endColumn":29},{"ruleId":"636","severity":1,"message":"655","line":24,"column":16,"nodeType":"638","messageId":"639","endLine":24,"endColumn":23},{"ruleId":"636","severity":1,"message":"656","line":25,"column":26,"nodeType":"638","messageId":"639","endLine":25,"endColumn":43},{"ruleId":"636","severity":1,"message":"657","line":26,"column":23,"nodeType":"638","messageId":"639","endLine":26,"endColumn":37},{"ruleId":"636","severity":1,"message":"658","line":27,"column":23,"nodeType":"638","messageId":"639","endLine":27,"endColumn":37},{"ruleId":"636","severity":1,"message":"659","line":28,"column":15,"nodeType":"638","messageId":"639","endLine":28,"endColumn":21},{"ruleId":"636","severity":1,"message":"660","line":30,"column":22,"nodeType":"638","messageId":"639","endLine":30,"endColumn":35},{"ruleId":"636","severity":1,"message":"661","line":31,"column":24,"nodeType":"638","messageId":"639","endLine":31,"endColumn":39},{"ruleId":"636","severity":1,"message":"662","line":32,"column":31,"nodeType":"638","messageId":"639","endLine":32,"endColumn":53},{"ruleId":"636","severity":1,"message":"663","line":33,"column":19,"nodeType":"638","messageId":"639","endLine":33,"endColumn":29},{"ruleId":"636","severity":1,"message":"664","line":34,"column":20,"nodeType":"638","messageId":"639","endLine":34,"endColumn":31},{"ruleId":"636","severity":1,"message":"665","line":35,"column":22,"nodeType":"638","messageId":"639","endLine":35,"endColumn":35},{"ruleId":"636","severity":1,"message":"666","line":36,"column":10,"nodeType":"638","messageId":"639","endLine":36,"endColumn":16},{"ruleId":"636","severity":1,"message":"667","line":36,"column":18,"nodeType":"638","messageId":"639","endLine":36,"endColumn":27},{"ruleId":"636","severity":1,"message":"668","line":37,"column":15,"nodeType":"638","messageId":"639","endLine":37,"endColumn":21},{"ruleId":"636","severity":1,"message":"669","line":39,"column":18,"nodeType":"638","messageId":"639","endLine":39,"endColumn":27},{"ruleId":"636","severity":1,"message":"670","line":41,"column":25,"nodeType":"638","messageId":"639","endLine":41,"endColumn":41},{"ruleId":"636","severity":1,"message":"671","line":45,"column":10,"nodeType":"638","messageId":"639","endLine":45,"endColumn":24},{"ruleId":"636","severity":1,"message":"672","line":45,"column":26,"nodeType":"638","messageId":"639","endLine":45,"endColumn":43},{"ruleId":"636","severity":1,"message":"673","line":47,"column":21,"nodeType":"638","messageId":"639","endLine":47,"endColumn":33},{"ruleId":"636","severity":1,"message":"674","line":56,"column":11,"nodeType":"638","messageId":"639","endLine":56,"endColumn":19},{"ruleId":"636","severity":1,"message":"675","line":59,"column":11,"nodeType":"638","messageId":"639","endLine":59,"endColumn":17},{"ruleId":"636","severity":1,"message":"676","line":21,"column":14,"nodeType":"638","messageId":"639","endLine":21,"endColumn":32},{"ruleId":"636","severity":1,"message":"677","line":22,"column":12,"nodeType":"638","messageId":"639","endLine":22,"endColumn":28},{"ruleId":"636","severity":1,"message":"678","line":23,"column":5,"nodeType":"638","messageId":"639","endLine":23,"endColumn":20},{"ruleId":"636","severity":1,"message":"637","line":2,"column":10,"nodeType":"638","messageId":"639","endLine":2,"endColumn":23},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":25,"column":20,"nodeType":"638","messageId":"639","endLine":25,"endColumn":25},{"ruleId":"636","severity":1,"message":"680","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":28},{"ruleId":"636","severity":1,"message":"681","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":24},{"ruleId":"636","severity":1,"message":"682","line":30,"column":5,"nodeType":"638","messageId":"639","endLine":30,"endColumn":12},{"ruleId":"636","severity":1,"message":"683","line":1,"column":10,"nodeType":"638","messageId":"639","endLine":1,"endColumn":16},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":25},{"ruleId":"636","severity":1,"message":"644","line":6,"column":37,"nodeType":"638","messageId":"639","endLine":6,"endColumn":42},{"ruleId":"636","severity":1,"message":"684","line":9,"column":8,"nodeType":"638","messageId":"639","endLine":9,"endColumn":15},{"ruleId":"636","severity":1,"message":"685","line":21,"column":12,"nodeType":"638","messageId":"639","endLine":21,"endColumn":27},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":22,"column":20,"nodeType":"638","messageId":"639","endLine":22,"endColumn":25},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":22,"column":20,"nodeType":"638","messageId":"639","endLine":22,"endColumn":25},{"ruleId":"636","severity":1,"message":"683","line":1,"column":10,"nodeType":"638","messageId":"639","endLine":1,"endColumn":16},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":25},{"ruleId":"636","severity":1,"message":"644","line":6,"column":37,"nodeType":"638","messageId":"639","endLine":6,"endColumn":42},{"ruleId":"636","severity":1,"message":"686","line":8,"column":10,"nodeType":"638","messageId":"639","endLine":8,"endColumn":31},{"ruleId":"636","severity":1,"message":"684","line":10,"column":8,"nodeType":"638","messageId":"639","endLine":10,"endColumn":15},{"ruleId":"636","severity":1,"message":"651","line":11,"column":10,"nodeType":"638","messageId":"639","endLine":11,"endColumn":35},{"ruleId":"636","severity":1,"message":"687","line":16,"column":9,"nodeType":"638","messageId":"639","endLine":16,"endColumn":20},{"ruleId":"636","severity":1,"message":"679","line":21,"column":20,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"688","line":21,"column":27,"nodeType":"638","messageId":"639","endLine":21,"endColumn":35},{"ruleId":"636","severity":1,"message":"684","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":15},{"ruleId":"636","severity":1,"message":"689","line":8,"column":10,"nodeType":"638","messageId":"639","endLine":8,"endColumn":29},{"ruleId":"636","severity":1,"message":"679","line":21,"column":20,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"683","line":2,"column":8,"nodeType":"638","messageId":"639","endLine":2,"endColumn":14},{"ruleId":"636","severity":1,"message":"690","line":3,"column":27,"nodeType":"638","messageId":"639","endLine":3,"endColumn":32},{"ruleId":"636","severity":1,"message":"691","line":4,"column":10,"nodeType":"638","messageId":"639","endLine":4,"endColumn":14},{"ruleId":"636","severity":1,"message":"692","line":6,"column":8,"nodeType":"638","messageId":"639","endLine":6,"endColumn":14},{"ruleId":"636","severity":1,"message":"684","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":15},{"ruleId":"636","severity":1,"message":"693","line":23,"column":11,"nodeType":"638","messageId":"639","endLine":23,"endColumn":18},{"ruleId":"636","severity":1,"message":"679","line":23,"column":20,"nodeType":"638","messageId":"639","endLine":23,"endColumn":25},{"ruleId":"636","severity":1,"message":"687","line":25,"column":9,"nodeType":"638","messageId":"639","endLine":25,"endColumn":20},{"ruleId":"636","severity":1,"message":"694","line":29,"column":9,"nodeType":"638","messageId":"639","endLine":29,"endColumn":15},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"684","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":15},{"ruleId":"636","severity":1,"message":"683","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":14},{"ruleId":"636","severity":1,"message":"679","line":19,"column":20,"nodeType":"638","messageId":"639","endLine":19,"endColumn":25},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"684","line":6,"column":8,"nodeType":"638","messageId":"639","endLine":6,"endColumn":15},{"ruleId":"636","severity":1,"message":"679","line":18,"column":20,"nodeType":"638","messageId":"639","endLine":18,"endColumn":25},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"695","line":9,"column":28,"nodeType":"638","messageId":"639","endLine":9,"endColumn":46},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"696","line":23,"column":11,"nodeType":"638","messageId":"639","endLine":23,"endColumn":19},{"ruleId":"636","severity":1,"message":"697","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":31},{"ruleId":"636","severity":1,"message":"698","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":27},{"ruleId":"636","severity":1,"message":"683","line":2,"column":8,"nodeType":"638","messageId":"639","endLine":2,"endColumn":14},{"ruleId":"636","severity":1,"message":"699","line":3,"column":10,"nodeType":"638","messageId":"639","endLine":3,"endColumn":15},{"ruleId":"632","replacedBy":"700"},{"ruleId":"634","replacedBy":"701"},{"ruleId":"636","severity":1,"message":"702","line":15,"column":3,"nodeType":"638","messageId":"639","endLine":15,"endColumn":25},{"ruleId":"636","severity":1,"message":"703","line":16,"column":3,"nodeType":"638","messageId":"639","endLine":16,"endColumn":28},{"ruleId":"636","severity":1,"message":"704","line":17,"column":3,"nodeType":"638","messageId":"639","endLine":17,"endColumn":28},{"ruleId":"632","replacedBy":"705"},{"ruleId":"634","replacedBy":"706"},{"ruleId":"636","severity":1,"message":"640","line":21,"column":19,"nodeType":"638","messageId":"639","endLine":21,"endColumn":29},{"ruleId":"636","severity":1,"message":"637","line":2,"column":10,"nodeType":"638","messageId":"639","endLine":2,"endColumn":23},{"ruleId":"636","severity":1,"message":"641","line":1,"column":17,"nodeType":"638","messageId":"639","endLine":1,"endColumn":25},{"ruleId":"636","severity":1,"message":"637","line":4,"column":10,"nodeType":"638","messageId":"639","endLine":4,"endColumn":23},{"ruleId":"636","severity":1,"message":"642","line":5,"column":20,"nodeType":"638","messageId":"639","endLine":5,"endColumn":29},{"ruleId":"636","severity":1,"message":"643","line":5,"column":31,"nodeType":"638","messageId":"639","endLine":5,"endColumn":35},{"ruleId":"636","severity":1,"message":"644","line":5,"column":37,"nodeType":"638","messageId":"639","endLine":5,"endColumn":42},{"ruleId":"636","severity":1,"message":"645","line":5,"column":44,"nodeType":"638","messageId":"639","endLine":5,"endColumn":50},{"ruleId":"636","severity":1,"message":"676","line":21,"column":14,"nodeType":"638","messageId":"639","endLine":21,"endColumn":32},{"ruleId":"636","severity":1,"message":"677","line":22,"column":12,"nodeType":"638","messageId":"639","endLine":22,"endColumn":28},{"ruleId":"636","severity":1,"message":"678","line":23,"column":5,"nodeType":"638","messageId":"639","endLine":23,"endColumn":20},{"ruleId":"636","severity":1,"message":"651","line":11,"column":3,"nodeType":"638","messageId":"639","endLine":11,"endColumn":28},{"ruleId":"636","severity":1,"message":"652","line":21,"column":17,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"653","line":22,"column":19,"nodeType":"638","messageId":"639","endLine":22,"endColumn":29},{"ruleId":"636","severity":1,"message":"654","line":23,"column":19,"nodeType":"638","messageId":"639","endLine":23,"endColumn":29},{"ruleId":"636","severity":1,"message":"655","line":24,"column":16,"nodeType":"638","messageId":"639","endLine":24,"endColumn":23},{"ruleId":"636","severity":1,"message":"656","line":25,"column":26,"nodeType":"638","messageId":"639","endLine":25,"endColumn":43},{"ruleId":"636","severity":1,"message":"657","line":26,"column":23,"nodeType":"638","messageId":"639","endLine":26,"endColumn":37},{"ruleId":"636","severity":1,"message":"658","line":27,"column":23,"nodeType":"638","messageId":"639","endLine":27,"endColumn":37},{"ruleId":"636","severity":1,"message":"659","line":28,"column":15,"nodeType":"638","messageId":"639","endLine":28,"endColumn":21},{"ruleId":"636","severity":1,"message":"660","line":30,"column":22,"nodeType":"638","messageId":"639","endLine":30,"endColumn":35},{"ruleId":"636","severity":1,"message":"661","line":31,"column":24,"nodeType":"638","messageId":"639","endLine":31,"endColumn":39},{"ruleId":"636","severity":1,"message":"662","line":32,"column":31,"nodeType":"638","messageId":"639","endLine":32,"endColumn":53},{"ruleId":"636","severity":1,"message":"663","line":33,"column":19,"nodeType":"638","messageId":"639","endLine":33,"endColumn":29},{"ruleId":"636","severity":1,"message":"664","line":34,"column":20,"nodeType":"638","messageId":"639","endLine":34,"endColumn":31},{"ruleId":"636","severity":1,"message":"665","line":35,"column":22,"nodeType":"638","messageId":"639","endLine":35,"endColumn":35},{"ruleId":"636","severity":1,"message":"666","line":36,"column":10,"nodeType":"638","messageId":"639","endLine":36,"endColumn":16},{"ruleId":"636","severity":1,"message":"667","line":36,"column":18,"nodeType":"638","messageId":"639","endLine":36,"endColumn":27},{"ruleId":"636","severity":1,"message":"668","line":37,"column":15,"nodeType":"638","messageId":"639","endLine":37,"endColumn":21},{"ruleId":"636","severity":1,"message":"669","line":39,"column":18,"nodeType":"638","messageId":"639","endLine":39,"endColumn":27},{"ruleId":"636","severity":1,"message":"670","line":41,"column":25,"nodeType":"638","messageId":"639","endLine":41,"endColumn":41},{"ruleId":"636","severity":1,"message":"671","line":45,"column":10,"nodeType":"638","messageId":"639","endLine":45,"endColumn":24},{"ruleId":"636","severity":1,"message":"672","line":45,"column":26,"nodeType":"638","messageId":"639","endLine":45,"endColumn":43},{"ruleId":"636","severity":1,"message":"673","line":47,"column":21,"nodeType":"638","messageId":"639","endLine":47,"endColumn":33},{"ruleId":"636","severity":1,"message":"674","line":56,"column":11,"nodeType":"638","messageId":"639","endLine":56,"endColumn":19},{"ruleId":"636","severity":1,"message":"675","line":59,"column":11,"nodeType":"638","messageId":"639","endLine":59,"endColumn":17},{"ruleId":"636","severity":1,"message":"637","line":2,"column":10,"nodeType":"638","messageId":"639","endLine":2,"endColumn":23},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":25,"column":20,"nodeType":"638","messageId":"639","endLine":25,"endColumn":25},{"ruleId":"636","severity":1,"message":"680","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":28},{"ruleId":"636","severity":1,"message":"681","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":24},{"ruleId":"636","severity":1,"message":"682","line":30,"column":5,"nodeType":"638","messageId":"639","endLine":30,"endColumn":12},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":22,"column":20,"nodeType":"638","messageId":"639","endLine":22,"endColumn":25},{"ruleId":"636","severity":1,"message":"683","line":2,"column":8,"nodeType":"638","messageId":"639","endLine":2,"endColumn":14},{"ruleId":"636","severity":1,"message":"699","line":3,"column":10,"nodeType":"638","messageId":"639","endLine":3,"endColumn":15},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"647","line":9,"column":10,"nodeType":"638","messageId":"639","endLine":9,"endColumn":28},{"ruleId":"636","severity":1,"message":"648","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":32},{"ruleId":"636","severity":1,"message":"649","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":28},{"ruleId":"636","severity":1,"message":"650","line":30,"column":5,"nodeType":"638","messageId":"639","endLine":30,"endColumn":10},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"696","line":23,"column":11,"nodeType":"638","messageId":"639","endLine":23,"endColumn":19},{"ruleId":"636","severity":1,"message":"697","line":28,"column":14,"nodeType":"638","messageId":"639","endLine":28,"endColumn":31},{"ruleId":"636","severity":1,"message":"698","line":29,"column":12,"nodeType":"638","messageId":"639","endLine":29,"endColumn":27},{"ruleId":"636","severity":1,"message":"683","line":1,"column":10,"nodeType":"638","messageId":"639","endLine":1,"endColumn":16},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":25},{"ruleId":"636","severity":1,"message":"644","line":6,"column":37,"nodeType":"638","messageId":"639","endLine":6,"endColumn":42},{"ruleId":"636","severity":1,"message":"684","line":9,"column":8,"nodeType":"638","messageId":"639","endLine":9,"endColumn":15},{"ruleId":"636","severity":1,"message":"685","line":21,"column":12,"nodeType":"638","messageId":"639","endLine":21,"endColumn":27},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"679","line":22,"column":20,"nodeType":"638","messageId":"639","endLine":22,"endColumn":25},{"ruleId":"636","severity":1,"message":"683","line":1,"column":10,"nodeType":"638","messageId":"639","endLine":1,"endColumn":16},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":25},{"ruleId":"636","severity":1,"message":"644","line":6,"column":37,"nodeType":"638","messageId":"639","endLine":6,"endColumn":42},{"ruleId":"636","severity":1,"message":"686","line":8,"column":10,"nodeType":"638","messageId":"639","endLine":8,"endColumn":31},{"ruleId":"636","severity":1,"message":"684","line":10,"column":8,"nodeType":"638","messageId":"639","endLine":10,"endColumn":15},{"ruleId":"636","severity":1,"message":"651","line":11,"column":10,"nodeType":"638","messageId":"639","endLine":11,"endColumn":35},{"ruleId":"636","severity":1,"message":"687","line":16,"column":9,"nodeType":"638","messageId":"639","endLine":16,"endColumn":20},{"ruleId":"636","severity":1,"message":"679","line":21,"column":20,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"684","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":15},{"ruleId":"636","severity":1,"message":"689","line":8,"column":10,"nodeType":"638","messageId":"639","endLine":8,"endColumn":29},{"ruleId":"636","severity":1,"message":"679","line":21,"column":20,"nodeType":"638","messageId":"639","endLine":21,"endColumn":25},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"684","line":6,"column":8,"nodeType":"638","messageId":"639","endLine":6,"endColumn":15},{"ruleId":"636","severity":1,"message":"679","line":18,"column":20,"nodeType":"638","messageId":"639","endLine":18,"endColumn":25},{"ruleId":"636","severity":1,"message":"683","line":2,"column":8,"nodeType":"638","messageId":"639","endLine":2,"endColumn":14},{"ruleId":"636","severity":1,"message":"690","line":3,"column":27,"nodeType":"638","messageId":"639","endLine":3,"endColumn":32},{"ruleId":"636","severity":1,"message":"691","line":4,"column":10,"nodeType":"638","messageId":"639","endLine":4,"endColumn":14},{"ruleId":"636","severity":1,"message":"692","line":6,"column":8,"nodeType":"638","messageId":"639","endLine":6,"endColumn":14},{"ruleId":"636","severity":1,"message":"684","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":15},{"ruleId":"636","severity":1,"message":"693","line":23,"column":11,"nodeType":"638","messageId":"639","endLine":23,"endColumn":18},{"ruleId":"636","severity":1,"message":"679","line":23,"column":20,"nodeType":"638","messageId":"639","endLine":23,"endColumn":25},{"ruleId":"636","severity":1,"message":"687","line":25,"column":9,"nodeType":"638","messageId":"639","endLine":25,"endColumn":20},{"ruleId":"636","severity":1,"message":"694","line":29,"column":9,"nodeType":"638","messageId":"639","endLine":29,"endColumn":15},{"ruleId":"636","severity":1,"message":"646","line":3,"column":24,"nodeType":"638","messageId":"639","endLine":3,"endColumn":33},{"ruleId":"636","severity":1,"message":"695","line":9,"column":28,"nodeType":"638","messageId":"639","endLine":9,"endColumn":46},{"ruleId":"636","severity":1,"message":"646","line":2,"column":24,"nodeType":"638","messageId":"639","endLine":2,"endColumn":33},{"ruleId":"636","severity":1,"message":"684","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":15},{"ruleId":"636","severity":1,"message":"683","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":14},{"ruleId":"636","severity":1,"message":"679","line":19,"column":20,"nodeType":"638","messageId":"639","endLine":19,"endColumn":25},{"ruleId":"636","severity":1,"message":"688","line":21,"column":27,"nodeType":"638","messageId":"639","endLine":21,"endColumn":35},{"ruleId":"636","severity":1,"message":"702","line":15,"column":3,"nodeType":"638","messageId":"639","endLine":15,"endColumn":25},{"ruleId":"636","severity":1,"message":"703","line":16,"column":3,"nodeType":"638","messageId":"639","endLine":16,"endColumn":28},{"ruleId":"636","severity":1,"message":"704","line":17,"column":3,"nodeType":"638","messageId":"639","endLine":17,"endColumn":28},"no-native-reassign",["707"],"no-negated-in-lhs",["708"],"no-unused-vars","'LinkContainer' is defined but never used.","Identifier","unusedVar","'setMessage' is assigned a value but never used.","'useState' is defined but never used.","'ListGroup' is defined but never used.","'Card' is defined but never used.","'Image' is defined but never used.","'Button' is defined but never used.","'FormGroup' is defined but never used.","'TOPUP_CREATE_RESET' is defined but never used.","'topUpCreateLoading' is assigned a value but never used.","'topUpCreateError' is assigned a value but never used.","'topUp' is assigned a value but never used.","'CONTRIBUTOR_DETAILS_RESET' is defined but never used.","'setEmail' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'setBusStop' is assigned a value but never used.","'setCity' is assigned a value but never used.","'setStateResidence' is assigned a value but never used.","'setNationality' is assigned a value but never used.","'setStateOrigin' is assigned a value but never used.","'setLga' is assigned a value but never used.","'setOccupation' is assigned a value but never used.","'setOrganisation' is assigned a value but never used.","'setMeansIdentification' is assigned a value but never used.","'setKinName' is assigned a value but never used.","'setKinPhone' is assigned a value but never used.","'setKinAddress' is assigned a value but never used.","'branch' is assigned a value but never used.","'setBranch' is assigned a value but never used.","'setDob' is assigned a value but never used.","'setGender' is assigned a value but never used.","'setMaritalStatus' is assigned a value but never used.","'accountOfficer' is assigned a value but never used.","'setAccountOfficer' is assigned a value but never used.","'setCreatedBy' is assigned a value but never used.","'branches' is assigned a value but never used.","'staffs' is assigned a value but never used.","'contributorLoading' is assigned a value but never used.","'contributorError' is assigned a value but never used.","'allContributors' is assigned a value but never used.","'error' is assigned a value but never used.","'loadingConfirm' is assigned a value but never used.","'errorConfirm' is assigned a value but never used.","'success' is assigned a value but never used.","'moment' is defined but never used.","'Message' is defined but never used.","'investmentError' is assigned a value but never used.","'investmentListDetails' is defined but never used.","'numberComma' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'BRANCH_CREATE_RESET' is defined but never used.","'Table' is defined but never used.","'Link' is defined but never used.","'Loader' is defined but never used.","'loading' is assigned a value but never used.","'client' is assigned a value but never used.","'receiptTopGenerate' is defined but never used.","'allStaff' is assigned a value but never used.","'contributeLoading' is assigned a value but never used.","'contributeError' is assigned a value but never used.","'Route' is defined but never used.",["707"],["708"],"'INVESTMENT_UPDATE_FAIL' is defined but never used.","'INVESTMENT_UPDATE_REQUEST' is defined but never used.","'INVESTMENT_UPDATE_SUCCESS' is defined but never used.",["707"],["708"],"no-global-assign","no-unsafe-negation"]